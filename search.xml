<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>npm install时遇到 ejs@2.7.4 postinstall /root/blog/node_modules/ejs &gt; node ./postinstall.js</title>
      <link href="posts/8c68042b.html"/>
      <url>posts/8c68042b.html</url>
      
        <content type="html"><![CDATA[<h2 id="QA"><a href="#QA" class="headerlink" title="QA!"></a>QA!</h2><p>由于布置不知道哪一步错了，所以他就报错了，经过我的不懈终于解决<br>错误如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span class="token operator">></span> ejs@2.7.4 postinstall /root/blog/node_modules/ejs<span class="token operator">></span> node ./postinstall.jssh: 1: node: Permission denied<span class="token function">npm</span> WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 <span class="token punctuation">(</span>node_modules/chokidar/node_modules/fsevents<span class="token punctuation">)</span>:<span class="token function">npm</span> WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="token keyword">for</span> fsevents@2.1.3: wanted <span class="token punctuation">{</span><span class="token string">"os"</span><span class="token keyword">:</span><span class="token string">"darwin"</span>,<span class="token string">"arch"</span><span class="token keyword">:</span><span class="token string">"any"</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>current: <span class="token punctuation">{</span><span class="token string">"os"</span><span class="token keyword">:</span><span class="token string">"linux"</span>,<span class="token string">"arch"</span><span class="token keyword">:</span><span class="token string">"x64"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">npm</span> ERR<span class="token operator">!</span> code ELIFECYCLE<span class="token function">npm</span> ERR<span class="token operator">!</span> syscall spawn<span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">file</span> sh<span class="token function">npm</span> ERR<span class="token operator">!</span> errno ENOENT<span class="token function">npm</span> ERR<span class="token operator">!</span> ejs@2.7.4 postinstall: <span class="token variable"><span class="token variable">`</span>node ./postinstall.js<span class="token variable">`</span></span><span class="token function">npm</span> ERR<span class="token operator">!</span> spawn ENOENT<span class="token function">npm</span> ERR<span class="token operator">!</span><span class="token function">npm</span> ERR<span class="token operator">!</span> Failed at the ejs@2.7.4 postinstall script.<span class="token function">npm</span> ERR<span class="token operator">!</span> This is probably not a problem with npm. There is likely additional logging output above.<span class="token function">npm</span> ERR<span class="token operator">!</span> A complete log of this run can be found in:<span class="token function">npm</span> ERR<span class="token operator">!</span>     /root/.npm/_logs/2020-10-30T23_06_47_863Z-debug.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rm</span> -rf node_modules<span class="token function">rm</span> -rf package-lock.json<span class="token function">npm</span> cache clean --force<span class="token function">npm</span> <span class="token function">install</span> --force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建教程Windows篇</title>
      <link href="posts/210d2f66.html"/>
      <url>posts/210d2f66.html</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>在2020年的时候在群友的启发下开始了我的博客生涯。由于自己的技术问题经常导致博客崩溃，然后需要重新构建。也就是在21年1月29日我又双叒叕把博客搞崩了，然后重新创建花费了好长时间，这时我就在想：我是不是应该把我的搭建过程写出来以方便我及你们的查看，于是就有了这篇windows篇文章。</p><h2 id="nodejs安装Windows篇"><a href="#nodejs安装Windows篇" class="headerlink" title="nodejs安装Windows篇"></a>nodejs安装Windows篇</h2><p>去官网下载稳定版本的<a href="https://nodejs.org/" target="_blank" rel="noopener"><code>nodejs</code></a>。<br>官方建议使用12.0，高版本nodejs不知道为什么一直不行（可能是我的问题😒<br>安装选项全部默认，一直Next。<br>最后安装好之后，打开<code>power shell</code>，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>在 <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a> 中下载最新的git bash<br>一直next就可以了</p><h2 id="NPM优化"><a href="#NPM优化" class="headerlink" title="NPM优化"></a>NPM优化</h2><p>使用淘宝的镜像</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者安装<code>cnpm</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在<code>power shell</code>中运行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><h2 id="初始化hexo程序"><a href="#初始化hexo程序" class="headerlink" title="初始化hexo程序"></a>初始化hexo程序</h2><pre class="line-numbers language-bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里我的<code>folder</code>写为<code>blog</code><br>如果npm install报错的话看QA</p><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-tree"><code class="language-tree">├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hexo基础使用"><a href="#hexo基础使用" class="headerlink" title="hexo基础使用"></a>hexo基础使用</h2><p>这还需要我教吗，自己去看啦，官方的很详细了<br><a href="https://hexo.io/docs/writing" target="_blank" rel="noopener">https://hexo.io/docs/writing</a></p><h2 id="使用新的主题"><a href="#使用新的主题" class="headerlink" title="使用新的主题"></a>使用新的主题</h2><p>下载一个你自己喜欢的主题，这里使用闪烁之狐的matery 主题，项目地址<br><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git matery</code></pre><p>将<code>matery</code>文件夹移动到<code>theme</code>文件夹里</p><pre><code>mv matery ~/blog/theme</code></pre><h3 id="配置-config"><a href="#配置-config" class="headerlink" title="配置_config"></a>配置_config</h3><p>在<code>hexo</code>的<code>_config.yml</code>中的<code>theme</code>修改为如下</p><pre><code>theme: hexo-theme-matery</code></pre><p>在<code>blog</code>文件夹打开<code>power shell</code>，输入<code>hexo s</code>这时你的hexo博客就基本配置好了。</p><p><code>_config.yml</code>文件的其它修改建议:</p><ul><li>修改 _config.yml 的 url 的值为你的网站主 URL（如：<a href="http://xxx.github.io)./" target="_blank" rel="noopener">http://xxx.github.io）。</a></li><li>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 language 的值为 zh-CN。<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><code>matery</code>主题的代码高亮有些问题，我们需要安装<code>hexo-prism-plugin</code>插件</li></ul><pre><code>npm i -S hexo-prism-plugin </code></pre><p>修改 <code>Hexo 根目录</code>下 <code>_config.yml</code>文件中 <code>highlight</code>的值为<code>false</code>，并新增<code>prism</code>插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yml"><code class="language-yml">highlight:   #代码块的设置   enable: false   #开启代码块高亮   line_number: true  #如果未指定语言，则启用自动检测   auto_detect: false  #显示行数   tab_replace: ''  #用n个空格替换tabs；如果值为空，则不会替换  tabs wrap: ture   hljs: false # 关闭原有的代码高亮，使用自己的 prismjs:  enable: false  preprocess: true  line_number: true  tab_replace: ''prism_plugin:   mode: 'preprocess' # realtime/preprocess   theme: 'tomorrow'   line_number: true # default false   custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hexo花括号显示失败的话，需要将hexo版本降级，改成hexo4.2.0版本就好了<br>卸载hexo5.0</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装4.2.0版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo@4.2.0 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>PS E:\hexo\blog&gt; hexo sERROR Plugin load failed: hexo-theme-landscapeError: EISDIR: illegal operation on a directory, read</code></pre><p>打开根目录下的<code>package.json</code><br>删除<code>&quot;hexo-theme-landscape&quot;: &quot;^0.0.3&quot;,</code>一行</p><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code>页是用来展示所有分类的页面，如果在你的博客<code>source</code>目录下还没有<code>categories/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2021-02-1 10:40:30type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code>页是用来展示所有标签的页面，如果在你的博客<code>source</code>目录下还没有<code>tags/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件<code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2021-02-1 10:40:30type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code>页是用来展示关于我和我的博客信息的页面，如果在你的博客<code>source</code>目录下还没有<code>about/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件<code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2021-02-1 10:40:30type: &quot;about&quot;layout: &quot;about&quot;---</code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code>页是用来展示留言板信息的页面，如果在你的博客<code>source</code>目录下还没有<code>contact/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;contact&quot;</code></pre><p>编辑你刚刚新建的页面文件<code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code>---title: contactdate: 2021-02-1 10:40:30type: &quot;contact&quot;layout: &quot;contact&quot;---</code></pre><p>注：留言板功能依赖于第三方评论系统，请激活你的评论系统才有效果。并且在主题的 _config.yml 文件中，第 19 至 21 行的“菜单”配置，取消关于留言板的注释即可。</p><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code>页是用来展示友情链接信息的页面，如果在你的博客<code>source</code>目录下还没有<code>friends/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;friends&quot;</code></pre><p>编辑你刚刚新建的页面文件<code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2021-02-1 10:40:30type: &quot;friends&quot;layout: &quot;friends&quot;---</code></pre><p>同时，在你的博客<code>source</code>目录下新建<code>_data</code>目录，在<code>_data</code>目录中新建<code>friends.json</code>文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span><span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://lollipopstudio.cn/logo-small.png"</span><span class="token punctuation">,</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Lollipop Studio"</span><span class="token punctuation">,</span>   <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"一个热爱 二刺螈 热爱 Minecraft 的工作室"</span><span class="token punctuation">,</span>   <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://lollipopstudio.cn"</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://blog.konara.best/img/logo.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"凉宫长栎の奇妙之地"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">" "</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blog.konara.best/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.booling.cn/img/bingling.png"</span><span class="token punctuation">,</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"冰凌sama"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"冰凌sama的个人博客✨"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.booling.cn"</span><span class="token punctuation">,</span>   <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Booling✨"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://blog.beanflame.cn/img/Kaze.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"豆焰"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"豆焰的个人博客"</span><span class="token punctuation">,</span>   <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blog.beanflame.cn"</span><span class="token punctuation">,</span>   <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"豆焰的博客"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客<code>source</code>目录下还没有<code>404.md</code>文件，那么你就需要新建一个</p><pre><code>hexo new page 404</code></pre><p>编辑你刚刚新建的页面文件<code>/source/404/index.md</code>，至少需要以下内容：</p><pre><code>---title: 404date: 2021-02-1 10:40:30type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;---</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>安装<code>hexo-generator-search</code>插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在<code>Hexo</code>根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>安装固定链接插件：<code>hexo-abbrlink</code></p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><p>Hexo根目录执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hexo配置文件末尾加入以下配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># hexo-abbrlink config 、固定文章地址插件abbrlink:  alg: crc32 #算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点  rep: hex    #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Hexo配置文件中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://blog.silentstar.cnroot: /permalink: posts/:abbrlink.htmlpermalink_defaults:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样站点结构就变成了：域名/posts/xxx.html</p><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装<code>hexo-wordcount</code>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在主题下的<code>_config.yml</code>文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yml"><code class="language-yml">postInfo:  date: true  update: false  wordCount: true # 设置文章字数统计为 true.  totalCount: true # 设置站点文章总字数统计为 true.  min2read: true # 阅读时长.  readCount: true # 阅读次数.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了<code>hexo-generator-feed</code>的 Hexo 插件来做<code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="推送至github"><a href="#推送至github" class="headerlink" title="推送至github"></a>推送至github</h2><p>安装<code>hexo-deployer-git</code>插件进行推送</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>hexo</code>的根目录修改<code>_config.yml</code>，如下</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:    - type: baidu_url_submitter    -  type: git       repository: https://github.com/wzhrdx/silentstar       branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推送，首先创建一个空的GitHub仓库</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完成推送</p><h2 id="配置CDN加速"><a href="#配置CDN加速" class="headerlink" title="配置CDN加速"></a>配置CDN加速</h2><h3 id="jsDelivr加速"><a href="#jsDelivr加速" class="headerlink" title="jsDelivr加速"></a>jsDelivr加速</h3><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<code>jsDelivr + Github</code>便是免费且好用的CDN，非常适合博客网站使用。<br>在<code>theme</code>的<code>_config.yml</code>中修改</p><pre class="line-numbers language-yml"><code class="language-yml">jsDelivr:  url: https://cdn.jsdelivr.net/gh/wzhrdx/silentstar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用法是<code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名</code></p><h3 id="vercel加速"><a href="#vercel加速" class="headerlink" title="vercel加速"></a>vercel加速</h3><p>vercel提供免费的静态加速，可以使经过jsdelivr加速的静态网页速度更快<br>点击Vercel<a href="https://vercel.com/" target="_blank" rel="noopener">官网</a>,并使用GitHub登录<br>导入 GitHub 博客 repo<br>稍等片刻，部署成功<br>这时候静态资源已经部署到<code>vercel</code>的边缘CDN 节点上了，下次你GitHub项目的任何更新会触发<code>vercel</code>项目更新。</p><p>接下来的就是切换域名,在 Domains 下为项目添加你的个人域，添加vercel的CNAME。</p><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><h3 id="让百度收录你的站点"><a href="#让百度收录你的站点" class="headerlink" title="让百度收录你的站点"></a>让百度收录你的站点</h3><p>登录<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台</a>登陆你的百度账号（QQ也可）<br>登录成功之后在站点管理中点击添加网站，输入域名<br>[<img src="https://s3.ax1x.com/2021/02/01/yZa5bq.png" alt="yZa5bq.png">]<br>点击下一步，在第三步选择CNAME验证</p><h3 id="使用sitemap"><a href="#使用sitemap" class="headerlink" title="使用sitemap"></a>使用sitemap</h3><p>安装sitemap插件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>hexo配置文件中的url一定要改成你的域名，这两个插件是根据你的url生成站点地图的。</p><p>安装后直接执行hexo cl&amp;&amp;hexo g命令，然后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</p><p>有sitemap文件之后，再将生成的sitemap文件提交给百度或者其他搜索引擎</p><p>然后我们在自动提交的sitemap那里填写自己baidusitemap文件的URL地址即可<br>示例如下</p><pre class="line-numbers language-html"><code class="language-html">https://你的域名/baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.ax1x.com/2021/02/01/yZw73F.png" alt="yZw73F.png"></p><h3 id="添加自动推送"><a href="#添加自动推送" class="headerlink" title="添加自动推送"></a>添加自动推送</h3><p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># 百度搜索资源平台提交链接baiduPush: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h3><p>安装主动推送插件：<code>hexo-baidu-url-submit</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># hexo-baidu-url-submit  百度主动推送baidu_url_submit:  count: 80 # 提交最新的一个链接  host: https://blog.silentstar.cn # 在百度站长平台中注册的域名  token: xxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>token</code>的位置在<code>API提交</code>里<br>此处为token<img src="https://s3.ax1x.com/2021/02/01/yZ0hKH.png" alt="yZ0hKH.png"></p><p>添加新的<code>deploy</code><br>在hexo的根目录修改_config.yml，如下</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:    - type: baidu_url_submitter    -  type: git       repository: https://github.com/wzhrdx/silentstar       branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p><code>robots.txt</code>是一种存放于网站根目录下的 ASCII 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br><code>robots.txt</code>要放在<code>Hexo根目录</code>下的<code>source</code>文件夹中。</p><p>每个人站点目录可能不太一样，可以参考下我的 robots.txt 文件，内容如下：</p><pre class="line-numbers language-yml"><code class="language-yml">User-agent: *Allow: /Allow: /posts/Disallow: /about/Disallow: /archives/Disallow: /js/Disallow: /css/Disallow: /contact/Disallow: /fonts/Disallow: /friends/Disallow: /libs/Disallow: /medias/Disallow: /page/Disallow: /tags/Disallow: /categories/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检测自己的robots文件<br><img src="https://s3.ax1x.com/2021/02/01/yZr7I1.png" alt="yZr7I1.png"></p><h2 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h2><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="line-numbers language-json"><code class="language-json">---title<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>date<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>top<span class="token operator">:</span> <span class="token boolean">false</span>cover<span class="token operator">:</span> <span class="token boolean">false</span>password<span class="token operator">:</span>toc<span class="token operator">:</span> <span class="token boolean">true</span>mathjax<span class="token operator">:</span> <span class="token boolean">true</span>summary<span class="token operator">:</span>tags<span class="token operator">:</span>categories<span class="token operator">:</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样新建文章后不用你自己补充了，修改信息就行。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建教程Linux篇</title>
      <link href="posts/f4577764.html"/>
      <url>posts/f4577764.html</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>在2020年的时候在群友的启发下开始了我的博客生涯。由于自己的技术问题经常导致博客崩溃，然后需要重新构建。也就是在21年1月29日我又双叒叕把博客搞崩了，然后重新创建花费了好长时间，这时我就在想：我是不是应该把我的搭建过程写出来以方便我及你们的查看，于是就有了这篇Linux篇文章。</p><h2 id="nodejs安装Linux篇"><a href="#nodejs安装Linux篇" class="headerlink" title="nodejs安装Linux篇"></a>nodejs安装Linux篇</h2><p>通过<code>apt install nodejs</code>安装的版本不能用来构建<code>hexo</code>，这里我们使用<code>node-v12.14.0</code>(或更高)<br>hexo支持的node版本如下表</p><table><thead><tr><th align="left">Hexo 版本</th><th align="left">最低兼容Node.js 版本</th></tr></thead><tbody><tr><td align="left">5.0+</td><td align="left">10.13.0</td></tr><tr><td align="left">4.1 - 4.2</td><td align="left">8.10</td></tr><tr><td align="left">4.0</td><td align="left">8.6</td></tr><tr><td align="left">3.3 - 3.9</td><td align="left">6.9</td></tr><tr><td align="left">3.2 - 3.3</td><td align="left">0.12</td></tr><tr><td align="left">3.0 - 3.1</td><td align="left">0.10 or iojs</td></tr><tr><td align="left">0.0.1 - 2.8</td><td align="left">0.10</td></tr></tbody></table><h3 id="删除旧版本的nodejs"><a href="#删除旧版本的nodejs" class="headerlink" title="删除旧版本的nodejs"></a>删除旧版本的nodejs</h3><pre class="line-numbers language-bash"><code class="language-bash">apt remove nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载node-v12-14-0-linux-x64源码"><a href="#下载node-v12-14-0-linux-x64源码" class="headerlink" title="下载node-v12.14.0-linux-x64源码"></a>下载node-v12.14.0-linux-x64源码</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~<span class="token function">wget</span> https://nodejs.org/download/release/v12.14.0/node-v12.14.0-linux-x64.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解压-tar-xz文件"><a href="#解压-tar-xz文件" class="headerlink" title="解压*.tar.xz文件"></a>解压*.tar.xz文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> Jxvf node-v12.14.0-linux-x64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>xz是绝大数Linux默认就带的一个压缩工具</p><blockquote><ul><li><code>xz -z</code> 要压缩的文件</li><li><code>xz -d</code> 要解压的文件</li></ul></blockquote><p>解压<code>tar.xz</code>文件：先 <code>xz -d xxx.tar.xz</code> 将 <code>xxx.tar.xz</code>解压成 <code>xxx.tar </code>然后，再用 <code>tar xvf xxx.tar</code>来解包。</p><p><code>xz -d *.tar.xz</code></p><p><code>tar -xvf  *.tar</code></p><p>可以看到这个压缩包也是打包后再压缩，外面是xz压缩方式，里层是tar打包方式。</p><p><strong>补充</strong>：目前可以直接使用 <code>tar  Jxvf  *.tar.xz</code>来解压！</p></blockquote><p>这时候我们就可以说已经完成一半了，先cd到nodejs的bin目录<code>cd node-v12.14.0-linux-x64/bin/</code></p><pre class="line-numbers language-bash"><code class="language-bash">./node -vv12.14.0./npm -v6.13.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置软链接"><a href="#设置软链接" class="headerlink" title="设置软链接"></a>设置软链接</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ln</span> -s ~/node-v12.14.0-linux-x64/bin/node /usr/local/bin/node<span class="token function">ln</span> -s ~/node-v12.14.0-linux-x64/bin/npm /usr/local/bin/npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>~/node-v12.14.0-linux-x64</code>为你解压到的路径，设置软链接后就可以在全局使用命令了</p><pre class="line-numbers language-bash"><code class="language-bash">node -vv12.14.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><pre class="line-numbers language-bash"><code class="language-bash">apt Install <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="NPM优化"><a href="#NPM优化" class="headerlink" title="NPM优化"></a>NPM优化</h2><p>使用淘宝的镜像</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者安装<code>cnpm</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><h2 id="初始化hexo程序"><a href="#初始化hexo程序" class="headerlink" title="初始化hexo程序"></a>初始化hexo程序</h2><pre class="line-numbers language-bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里我的<code>folder</code>写为<code>blog</code><br>如果npm install报错的话看QA</p><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-tree"><code class="language-tree">├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hexo基础使用"><a href="#hexo基础使用" class="headerlink" title="hexo基础使用"></a>hexo基础使用</h2><p>这还需要我教吗，自己去看啦，官方的很详细了<br><a href="https://hexo.io/docs/writing" target="_blank" rel="noopener">https://hexo.io/docs/writing</a></p><h2 id="使用新的主题"><a href="#使用新的主题" class="headerlink" title="使用新的主题"></a>使用新的主题</h2><p>下载一个你自己喜欢的主题，这里使用闪烁之狐的matery 主题，项目地址<br><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git matery</code></pre><p>将<code>matery</code>文件夹移动到<code>theme</code>文件夹里</p><pre><code>mv matery ~/blog/theme</code></pre><h3 id="配置-config"><a href="#配置-config" class="headerlink" title="配置_config"></a>配置_config</h3><p>在<code>hexo</code>的<code>_config.yml</code>中的<code>theme</code>修改为如下</p><pre><code>theme: hexo-theme-matery</code></pre><p>在<code>blog</code>文件夹打开<code>power shell</code>，输入<code>hexo s</code>这时你的hexo博客就基本配置好了。</p><p><code>_config.yml</code>文件的其它修改建议:</p><ul><li>修改 _config.yml 的 url 的值为你的网站主 URL（如：<a href="http://xxx.github.io)./" target="_blank" rel="noopener">http://xxx.github.io）。</a></li><li>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 language 的值为 zh-CN。<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><code>matery</code>主题的代码高亮有些问题，我们需要安装<code>hexo-prism-plugin</code>插件</li></ul><pre><code>npm i -S hexo-prism-plugin </code></pre><p>修改 <code>Hexo 根目录</code>下 <code>_config.yml</code>文件中 <code>highlight</code>的值为<code>false</code>，并新增<code>prism</code>插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yml"><code class="language-yml">highlight:   #代码块的设置   enable: false   #开启代码块高亮   line_number: true  #如果未指定语言，则启用自动检测   auto_detect: false  #显示行数   tab_replace: ''  #用n个空格替换tabs；如果值为空，则不会替换  tabs wrap: ture   hljs: false # 关闭原有的代码高亮，使用自己的 prismjs:  enable: false  preprocess: true  line_number: true  tab_replace: ''prism_plugin:   mode: 'preprocess' # realtime/preprocess   theme: 'tomorrow'   line_number: true # default false   custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hexo花括号显示失败的话，需要将hexo版本降级，改成hexo4.2.0版本就好了<br>卸载hexo5.0</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装4.2.0版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo@4.2.0 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若出现以下内荣</p><pre><code>PS E:\hexo\blog&gt; hexo sERROR Plugin load failed: hexo-theme-landscapeError: EISDIR: illegal operation on a directory, read</code></pre><p>打开根目录下的<code>package.json</code><br>删除<code>&quot;hexo-theme-landscape&quot;: &quot;^0.0.3&quot;,</code>一行</p><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code>页是用来展示所有分类的页面，如果在你的博客<code>source</code>目录下还没有<code>categories/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2021-02-1 10:40:30type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code>页是用来展示所有标签的页面，如果在你的博客<code>source</code>目录下还没有<code>tags/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件<code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2021-02-1 10:40:30type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code>页是用来展示关于我和我的博客信息的页面，如果在你的博客<code>source</code>目录下还没有<code>about/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件<code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2021-02-1 10:40:30type: &quot;about&quot;layout: &quot;about&quot;---</code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code>页是用来展示留言板信息的页面，如果在你的博客<code>source</code>目录下还没有<code>contact/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;contact&quot;</code></pre><p>编辑你刚刚新建的页面文件<code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code>---title: contactdate: 2021-02-1 10:40:30type: &quot;contact&quot;layout: &quot;contact&quot;---</code></pre><p>注：留言板功能依赖于第三方评论系统，请激活你的评论系统才有效果。并且在主题的 _config.yml 文件中，第 19 至 21 行的“菜单”配置，取消关于留言板的注释即可。</p><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code>页是用来展示友情链接信息的页面，如果在你的博客<code>source</code>目录下还没有<code>friends/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;friends&quot;</code></pre><p>编辑你刚刚新建的页面文件<code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2021-02-1 10:40:30type: &quot;friends&quot;layout: &quot;friends&quot;---</code></pre><p>同时，在你的博客<code>source</code>目录下新建<code>_data</code>目录，在<code>_data</code>目录中新建<code>friends.json</code>文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span><span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://lollipopstudio.cn/logo-small.png"</span><span class="token punctuation">,</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Lollipop Studio"</span><span class="token punctuation">,</span>   <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"一个热爱 二刺螈 热爱 Minecraft 的工作室"</span><span class="token punctuation">,</span>   <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://lollipopstudio.cn"</span><span class="token punctuation">,</span><span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://blog.konara.best/img/logo.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"凉宫长栎の奇妙之地"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">" "</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blog.konara.best/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.booling.cn/img/bingling.png"</span><span class="token punctuation">,</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"冰凌sama"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"冰凌sama的个人博客✨"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.booling.cn"</span><span class="token punctuation">,</span>   <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Booling✨"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://blog.beanflame.cn/img/Kaze.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"豆焰"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"豆焰的个人博客"</span><span class="token punctuation">,</span>   <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blog.beanflame.cn"</span><span class="token punctuation">,</span>   <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"豆焰的博客"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客<code>source</code>目录下还没有<code>404.md</code>文件，那么你就需要新建一个</p><pre><code>hexo new page 404</code></pre><p>编辑你刚刚新建的页面文件<code>/source/404/index.md</code>，至少需要以下内容：</p><pre><code>---title: 404date: 2021-02-1 10:40:30type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;---</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>安装<code>hexo-generator-search</code>插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在<code>Hexo</code>根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>安装固定链接插件：<code>hexo-abbrlink</code></p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><p>Hexo根目录执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hexo配置文件末尾加入以下配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># hexo-abbrlink config 、固定文章地址插件abbrlink:  alg: crc32 #算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点  rep: hex    #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Hexo配置文件中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://blog.silentstar.cnroot: /permalink: posts/:abbrlink.htmlpermalink_defaults:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样站点结构就变成了：域名/posts/xxx.html</p><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装<code>hexo-wordcount</code>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在主题下的<code>_config.yml</code>文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yml"><code class="language-yml">postInfo:  date: true  update: false  wordCount: true # 设置文章字数统计为 true.  totalCount: true # 设置站点文章总字数统计为 true.  min2read: true # 阅读时长.  readCount: true # 阅读次数.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了<code>hexo-generator-feed</code>的 Hexo 插件来做<code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="推送至github"><a href="#推送至github" class="headerlink" title="推送至github"></a>推送至github</h2><p>安装<code>hexo-deployer-git</code>插件进行推送</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>hexo</code>的根目录修改<code>_config.yml</code>，如下</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:    - type: baidu_url_submitter    -  type: git       repository: https://github.com/wzhrdx/silentstar       branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推送，首先创建一个空的GitHub仓库</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完成推送</p><h2 id="配置CDN加速"><a href="#配置CDN加速" class="headerlink" title="配置CDN加速"></a>配置CDN加速</h2><h3 id="jsDelivr加速"><a href="#jsDelivr加速" class="headerlink" title="jsDelivr加速"></a>jsDelivr加速</h3><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<code>jsDelivr + Github</code>便是免费且好用的CDN，非常适合博客网站使用。<br>在<code>theme</code>的<code>_config.yml</code>中修改</p><pre class="line-numbers language-yml"><code class="language-yml">jsDelivr:  url: https://cdn.jsdelivr.net/gh/wzhrdx/silentstar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用法是<code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名</code></p><h3 id="vercel加速"><a href="#vercel加速" class="headerlink" title="vercel加速"></a>vercel加速</h3><p>vercel提供免费的静态加速，可以使经过jsdelivr加速的静态网页速度更快<br>点击Vercel<a href="https://vercel.com/" target="_blank" rel="noopener">官网</a>,并使用GitHub登录<br>导入 GitHub 博客 repo<br>稍等片刻，部署成功<br>这时候静态资源已经部署到<code>vercel</code>的边缘CDN 节点上了，下次你GitHub项目的任何更新会触发<code>vercel</code>项目更新。</p><p>接下来的就是切换域名,在 Domains 下为项目添加你的个人域，添加vercel的CNAME。</p><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><h3 id="让百度收录你的站点"><a href="#让百度收录你的站点" class="headerlink" title="让百度收录你的站点"></a>让百度收录你的站点</h3><p>登录<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台</a>登陆你的百度账号（QQ也可）<br>登录成功之后在站点管理中点击添加网站，输入域名<br>[<img src="https://s3.ax1x.com/2021/02/01/yZa5bq.png" alt="yZa5bq.png">]<br>点击下一步，在第三步选择CNAME验证</p><h3 id="使用sitemap"><a href="#使用sitemap" class="headerlink" title="使用sitemap"></a>使用sitemap</h3><p>安装sitemap插件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>hexo配置文件中的url一定要改成你的域名，这两个插件是根据你的url生成站点地图的。</p><p>安装后直接执行hexo cl&amp;&amp;hexo g命令，然后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</p><p>有sitemap文件之后，再将生成的sitemap文件提交给百度或者其他搜索引擎</p><p>然后我们在自动提交的sitemap那里填写自己baidusitemap文件的URL地址即可<br>示例如下</p><pre class="line-numbers language-html"><code class="language-html">https://你的域名/baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.ax1x.com/2021/02/01/yZw73F.png" alt="yZw73F.png"></p><h3 id="添加自动推送"><a href="#添加自动推送" class="headerlink" title="添加自动推送"></a>添加自动推送</h3><p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># 百度搜索资源平台提交链接baiduPush: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h3><p>安装主动推送插件：<code>hexo-baidu-url-submit</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># hexo-baidu-url-submit  百度主动推送baidu_url_submit:  count: 80 # 提交最新的一个链接  host: https://blog.silentstar.cn # 在百度站长平台中注册的域名  token: xxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>token</code>的位置在<code>API提交</code>里<br>此处为token<img src="https://s3.ax1x.com/2021/02/01/yZ0hKH.png" alt="yZ0hKH.png"></p><p>添加新的<code>deploy</code><br>在hexo的根目录修改_config.yml，如下</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:    - type: baidu_url_submitter    -  type: git       repository: https://github.com/wzhrdx/silentstar       branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p><code>robots.txt</code>是一种存放于网站根目录下的 ASCII 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br><code>robots.txt</code>要放在<code>Hexo根目录</code>下的<code>source</code>文件夹中。</p><p>每个人站点目录可能不太一样，可以参考下我的 robots.txt 文件，内容如下：</p><pre class="line-numbers language-yml"><code class="language-yml">User-agent: *Allow: /Allow: /posts/Disallow: /about/Disallow: /archives/Disallow: /js/Disallow: /css/Disallow: /contact/Disallow: /fonts/Disallow: /friends/Disallow: /libs/Disallow: /medias/Disallow: /page/Disallow: /tags/Disallow: /categories/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检测自己的robots文件<br><img src="https://s3.ax1x.com/2021/02/01/yZr7I1.png" alt="yZr7I1.png"></p><h2 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h2><p>首先为了新建文章方便，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="line-numbers language-json"><code class="language-json">---title<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>date<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>top<span class="token operator">:</span> <span class="token boolean">false</span>cover<span class="token operator">:</span> <span class="token boolean">false</span>password<span class="token operator">:</span>toc<span class="token operator">:</span> <span class="token boolean">true</span>mathjax<span class="token operator">:</span> <span class="token boolean">true</span>summary<span class="token operator">:</span>tags<span class="token operator">:</span>categories<span class="token operator">:</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样新建文章后不用你自己补充了，修改信息就行。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logon failed, use ctrl+c to cancel basic credential prompt解决办法</title>
      <link href="posts/457fcab1.html"/>
      <url>posts/457fcab1.html</url>
      
        <content type="html"><![CDATA[<p>使用<code>power shell</code>推送时，在弹出框中输入github用户名和密码，但是推送失败，提示Logon failed, use ctrl+c to cancel basic credential prompt.<br>而使用<code>git bash</code>推送时在弹出框中输入github用户名和密码后重新弹出输入框，重新输入后推送成功。</p><p>原因：新版的GIT不再支持弹出框验证用户名密码的方式，所以推送请求被拒绝了。</p><h3 id="解决办法1"><a href="#解决办法1" class="headerlink" title="解决办法1"></a>解决办法1</h3><p>重新去<a href="https://git-scm.com/downloads" target="_blank" rel="noopener"><code>git</code></a>官网下载<code>git bash</code> 安装好后重新推送，输入密码之后推送成功。</p><h3 id="解决办法2"><a href="#解决办法2" class="headerlink" title="解决办法2"></a>解决办法2</h3><p>这里有详细教程，我还没有进行尝试<br><a href="https://www.cnblogs.com/steamed-twisted-roll/p/14155092.html" target="_blank" rel="noopener">点击这里前去</a></p><p>但是根据的我的猜测，在<code>power shell</code>中应该是行不通的</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的世界mod开发本地化和创造模式物品栏</title>
      <link href="posts/5de4689c.html"/>
      <url>posts/5de4689c.html</url>
      
        <content type="html"><![CDATA[<h1 id="创造模式物品栏"><a href="#创造模式物品栏" class="headerlink" title="创造模式物品栏"></a>创造模式物品栏</h1><p>那么显而易见的是，give命令实在是太麻烦了，所以我们需要将物品放进一个创造模式物品栏里。<br>我们直接在<code>ItemSilverNugget()</code>构造器里加一句<code>this.setCreativeTab(CreativeTabs.FOOD);</code>就好了，原版物品栏的名称可以在CreativeTabs类里找到<br>这里我们将银粒放入了食物栏（恶趣味）<br>#新的创造模式物品栏<br>创建物品栏有两种方法一种是直接添加到主类里，一种是新建一个Java类这里我推荐第二种方法</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>在XenoAge.java这个主类里添加字段：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> CreativeTabs TAB_XENO_AGE<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreativeTabs</span><span class="token punctuation">(</span>MODID<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ItemStack <span class="token function">createIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ItemStack</span><span class="token punctuation">(</span>ItemRegistryHandler<span class="token punctuation">.</span>SILVER_NUGGET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在<code>ItemSilverNugget()</code>构造器里加入<code>this.setCreativeTab(XenoAge.TAB_XENO_AGE);</code><br>重启游戏，你会看到一个新的创造模式物品栏。<br>这里<code>SILVER_NUGGET</code>的材质将作为创造物品栏的图标显示</p><p><em>注意：必须以某种方式设置 Tab 的 Icon，如果留 null会引发崩溃</em></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>新建一个类<code>src/main/java/com/wzhrdx/XenoAge/creativetab/TabXenoAge.java</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>creativetab<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>item<span class="token punctuation">.</span>ItemRegistryHandler<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>creativetab<span class="token punctuation">.</span>CreativeTabs<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>item<span class="token punctuation">.</span>ItemStack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabXenoAge</span> <span class="token keyword">extends</span> <span class="token class-name">CreativeTabs</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> TabXenoAge TAB_XENO_AGE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabXenoAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TabXenoAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"xenoage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ItemStack <span class="token function">createIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ItemStack</span><span class="token punctuation">(</span>ItemRegistryHandler<span class="token punctuation">.</span>SILVER_NUGGET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在<code>ItemSilverNugget()</code>构造器里加入<code>this.setCreativeTab(TabXenoAge.TAB_XENO_AGE);</code><br>重启游戏，你会看到一个新的创造模式物品栏。</p><h1 id="物品本地化"><a href="#物品本地化" class="headerlink" title="物品本地化"></a>物品本地化</h1><p>现在我们的物品还是一个<code>item.xenoage.silvernugget.name</code>的名字，我们需要给他们添加语言文件</p><ul><li>  我们需要语言文件，将上面的代指名称翻译成各种语言，翻译后的名称叫本地化名称</li><li>  代指名称使用物品的<code>setUnlocalizedName()</code>方法进行设置(新的版本为<code>setTranslationKey()</code>)</li><li>  本地化名称使用语言文件(*.lang)进行设置。<br>新建包<code>resources/assets/mymod/lang/</code>，新建 en_us.lang 文件，对应英文版本，在里面写入（无需多余空格、引号等字符）：<pre class="line-numbers language-lang"><code class="language-lang">item.xenoage.silvernugget.name=Silver NuggetitemGroup.xenoage=Xeno Ageitem.xenoage.silveringot.name=Silver Ingot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>然后我们新建 zh_cn.lang，对应中文版本，写法同上。<pre class="line-numbers language-lang"><code class="language-lang">item.xenoage.silvernugget.name=银粒itemGroup.xenoage=魔法时代item.xenoage.silveringot.name=银锭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>注意：1.12语言文件名应该使用全小写，比如 zh_cn 而不是 zh_CN*</li></ul><hr><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li><input disabled="" type="checkbox"> <blockquote><p>练习1 给<code>silverore</code>添加英文名字<code>Silver Ore</code></p></blockquote></li><li><input disabled="" type="checkbox"> <blockquote><p>练习2 给<code>silverore</code>添加中文名字 <code>银矿</code></p></blockquote></li><li><input disabled="" type="checkbox"> <blockquote><p>提示 方块和物品不一样，他是<code>titl</code>开头，你也可以打开游戏查看UnlocalizedName</p></blockquote><details><summary>答案</summary><pre><blockcode>// en_us.langtile.xenoage.silverore.name=Silver Org························································// zh_cn.langtile.xenoage.silverore.name=银矿 </blockcode></pre></details></li></ul>]]></content>
      
      
      <categories>
          
          <category> 我的世界mod开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界mod开发 </tag>
            
            <tag> Forge </tag>
            
            <tag> Mod </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的世界mod开发1.4第一个方块</title>
      <link href="posts/2f6cd6fe.html"/>
      <url>posts/2f6cd6fe.html</url>
      
        <content type="html"><![CDATA[<p>制作一个方块跟制作物品一样也就两个步骤：<br>    1.创建一个方块,并添加材质<br>    2.实例化并注册这个方块</p><h1 id="创建方块"><a href="#创建方块" class="headerlink" title="创建方块"></a>创建方块</h1><p>在包<code>src/main/java/com/wzhrdx/XenoAge</code>下新建类<code>block.BlockSilverOre</code>并继承 Block 类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>block<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>XenoAge<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>creativetab<span class="token punctuation">.</span>TabXenoAge<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>block<span class="token punctuation">.</span>Block<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>block<span class="token punctuation">.</span>material<span class="token punctuation">.</span>Material<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockSilverOre</span> <span class="token keyword">extends</span> <span class="token class-name">Block</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BlockSilverOre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>Material<span class="token punctuation">.</span>ROCK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTranslationKey</span><span class="token punctuation">(</span>XenoAge<span class="token punctuation">.</span>MODID <span class="token operator">+</span> <span class="token string">".silverore"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setRegistryName</span><span class="token punctuation">(</span><span class="token string">"silver_ore"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCreativeTab</span><span class="token punctuation">(</span>TabXenoAge<span class="token punctuation">.</span>TAB_XENO_AGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setHardness</span><span class="token punctuation">(</span><span class="token number">1.5F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setHarvestLevel</span><span class="token punctuation">(</span><span class="token string">"pickaxe"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> <blockquote><p>super构造函数，用于方块颜色如ROCK，<br>设置成 ROCK 之后地图上显示的方块颜色就是石头的灰色<code>Material.AIR</code><br><code>Material.GRASS</code><br><code>Material.GROUND</code><br><code>Material.WOOD</code><br><code>Material.ROCK</code><br>更多对着<code>Material.ROCK</code>按CTRL+鼠标左键</p></blockquote></li><li><input disabled="" type="checkbox"> <blockquote><p> <code>setBlockUnbreakable</code>方法用于设定方块的硬度为-1，即不能损坏。 <code>setHardness</code>方法用于设定方块的硬度，如黑曜石是50，铁块5，金块3，圆石2，石头1.5，南瓜1，泥土0.5，甘蔗0，基岩-1。<br> <code>setHarvestLevel</code>方法用于设定方块的可挖掘等级，如钻石镐是3，铁2，石1，木金0。<br><code>setLightLevel</code>方法用于设定方块的光照，其周围的光照为设定值x15，如岩浆1.0，对应15，红石火把0.5，对应7.5。<br><code>setLightOpacity</code>方法用于设定方块的透光率，数值越大透光率越低，如树叶和蜘蛛网是1，水和冰3。<br><code>setResistance</code>方法用于设定方块的爆炸抗性，如木头的抗性为4，石头为10，黑曜石为2000，基岩为6000000。<br><code>setStepSound</code>方法用于设定走在方块上的响声。<br><code>setTickRandomly</code>方法用于设定方块是否会接受随机Tick（如农作物）。</p></blockquote></li></ul><hr><h1 id="注册方块"><a href="#注册方块" class="headerlink" title="注册方块"></a>注册方块</h1><p>在包<code>src/main/java/com/wzhrdx/XenoAge</code>下新建类<code>block.BlockRegistryHandler</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>block<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>block<span class="token punctuation">.</span>Block<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>event<span class="token punctuation">.</span>RegistryEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mod<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>eventhandler<span class="token punctuation">.</span>SubscribeEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>registries<span class="token punctuation">.</span>IForgeRegistry<span class="token punctuation">;</span><span class="token annotation punctuation">@Mod</span><span class="token punctuation">.</span>EventBusSubscriber<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockRegistryHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> BlockSilverOre BLOCK_SILVER_ORE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlockSilverOre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SubscribeEvent</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onRegistry</span><span class="token punctuation">(</span>RegistryEvent<span class="token punctuation">.</span>Register<span class="token operator">&lt;</span>Block<span class="token operator">></span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IForgeRegistry<span class="token operator">&lt;</span>Block<span class="token operator">></span> registry <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>BLOCK_SILVER_ORE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>src/main/java/com/wzhrdx/XenoAge/item/ItemRegistryHandler.java</code><br>在<code>public static Item SILVER_NUGGET = new ItemSilverNugget();</code>下方添加</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ItemBlock ITEM_SILVER_ORE <span class="token operator">=</span> <span class="token function">withRegistryName</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ItemBlock</span><span class="token punctuation">(</span>BlockRegistryHandler<span class="token punctuation">.</span>BLOCK_SILVER_ORE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> ItemBlock <span class="token function">withRegistryName</span><span class="token punctuation">(</span>ItemBlock item<span class="token punctuation">)</span><span class="token punctuation">{</span>    item<span class="token punctuation">.</span><span class="token function">setRegistryName</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> item<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注册材质"><a href="#注册材质" class="headerlink" title="注册材质"></a>注册材质</h1><p>继续修改<code>src/main/java/com/wzhrdx/XenoAge/item/ItemRegistryHandler.java</code><br>，<br>添加如下代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">registerModel</span><span class="token punctuation">(</span>SILVER_NUGGET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerModel</span><span class="token punctuation">(</span>ITEM_SILVER_ORE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新添加内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="添加材质"><a href="#添加材质" class="headerlink" title="添加材质"></a>添加材质</h1><p>创建包<code>src/main/resources/assets/xenoage/blockstates</code>然后创建<code>silver_ore.json</code><br><code>src/main/resources/assets/xenoage/blockstates/silver_ore.json</code></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"variants"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"xenoage:silver_ore"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建<code>src/main/resources/assets/xenoage/models/block/silver_ore.json</code></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"parent"</span><span class="token operator">:</span> <span class="token string">"block/cube"</span><span class="token punctuation">,</span>  <span class="token property">"textures"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"particle"</span><span class="token operator">:</span> <span class="token string">"xenoage:blocks/silver_ore"</span><span class="token punctuation">,</span>    <span class="token property">"down"</span><span class="token operator">:</span> <span class="token string">"xenoage:blocks/silver_ore"</span><span class="token punctuation">,</span>    <span class="token property">"up"</span><span class="token operator">:</span> <span class="token string">"xenoage:blocks/silver_ore"</span><span class="token punctuation">,</span>    <span class="token property">"north"</span><span class="token operator">:</span> <span class="token string">"xenoage:blocks/silver_ore"</span><span class="token punctuation">,</span>    <span class="token property">"south"</span><span class="token operator">:</span> <span class="token string">"xenoage:blocks/silver_ore"</span><span class="token punctuation">,</span>    <span class="token property">"west"</span><span class="token operator">:</span> <span class="token string">"xenoage:blocks/silver_ore"</span><span class="token punctuation">,</span>    <span class="token property">"east"</span><span class="token operator">:</span> <span class="token string">"xenoage:blocks/silver_ore"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建<code>src/main/resources/assets/xenoage/models/item/silver_ore.json</code></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"parent"</span><span class="token operator">:</span> <span class="token string">"xenoage:block/silver_ore"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建<code>src/main/resources/assets/xenoage/textures/blocks</code><br>放入材质<code>silver_ore.png</code>  <img src="https://s1.ax1x.com/2020/08/26/dRYcmF.png" alt="dRYcmF.png"></p><hr><h1 id="本章全部代码"><a href="#本章全部代码" class="headerlink" title="本章全部代码"></a>本章全部代码</h1><p><code>src/main/java/com/wzhrdx/XenoAge/item/ItemRegistryHandler.java</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>block<span class="token punctuation">.</span>BlockRegistryHandler<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>client<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>block<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ModelResourceLocation<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>item<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>item<span class="token punctuation">.</span>ItemBlock<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>client<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ModelRegistryEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>client<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ModelLoader<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>event<span class="token punctuation">.</span>RegistryEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mod<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>eventhandler<span class="token punctuation">.</span>SubscribeEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>relauncher<span class="token punctuation">.</span>Side<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>relauncher<span class="token punctuation">.</span>SideOnly<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>registries<span class="token punctuation">.</span>IForgeRegistry<span class="token punctuation">;</span><span class="token annotation punctuation">@Mod</span><span class="token punctuation">.</span>EventBusSubscriber<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemRegistryHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Item SILVER_NUGGET <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemSilverNugget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ItemBlock ITEM_SILVER_ORE <span class="token operator">=</span> <span class="token function">withRegistryName</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ItemBlock</span><span class="token punctuation">(</span>BlockRegistryHandler<span class="token punctuation">.</span>BLOCK_SILVER_ORE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ItemBlock <span class="token function">withRegistryName</span><span class="token punctuation">(</span>ItemBlock item<span class="token punctuation">)</span><span class="token punctuation">{</span>        item<span class="token punctuation">.</span><span class="token function">setRegistryName</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SubscribeEvent</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onRegistry</span><span class="token punctuation">(</span>RegistryEvent<span class="token punctuation">.</span>Register<span class="token operator">&lt;</span>Item<span class="token operator">></span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>        IForgeRegistry<span class="token operator">&lt;</span>Item<span class="token operator">></span> registry <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>SILVER_NUGGET<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>ITEM_SILVER_ORE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SideOnly</span><span class="token punctuation">(</span>Side<span class="token punctuation">.</span>CLIENT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerModel</span> <span class="token punctuation">(</span>Item item<span class="token punctuation">)</span><span class="token punctuation">{</span>        ModelResourceLocation modelResourceLocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelResourceLocation</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getRegistryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"inventory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ModelLoader<span class="token punctuation">.</span><span class="token function">setCustomModelResourceLocation</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> modelResourceLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SubscribeEvent</span>    <span class="token annotation punctuation">@SideOnly</span><span class="token punctuation">(</span>Side<span class="token punctuation">.</span>CLIENT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onModelRegistry</span><span class="token punctuation">(</span>ModelRegistryEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">registerModel</span><span class="token punctuation">(</span>SILVER_NUGGET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">registerModel</span><span class="token punctuation">(</span>ITEM_SILVER_ORE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><details><summary>答案</summary><pre><blockcode> <p> </blockcode></pre></p></details>]]></content>
      
      
      <categories>
          
          <category> 我的世界mod开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界mod开发 </tag>
            
            <tag> Forge </tag>
            
            <tag> Mod </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的世界mod开发1.3第一个物品</title>
      <link href="posts/c137323d.html"/>
      <url>posts/c137323d.html</url>
      
        <content type="html"><![CDATA[<p>制作一个物品分为两步：</p><p>1.创建一个物品，并添加材质</p><p>2.实例化并注册这个物品</p><p>那么由于我懒我就不介绍了，自己直接照抄xiao_bang的介绍了</p><blockquote><p>在Minecraft中，有烈火般的烈焰棒（废话），咱们这次做来做个钻石颜色的棒子（真的想不出来要做什么了），这一次教程会一步一步地带着你完成制作新物品的全过程。</p></blockquote><p>好现在我们来创建一个新的物品，如果你有经常翻看net.minecraft源码,在item包里面会看到在mc中遇到的各种物品，都继承了Item类，那么我们做的物品也要继承这个类（继承这个类的一般都是物品）</p><p>新建一个包com.wzhrdx.XenoAge.item,并在其中创建一个类ItemSilverNugget(注意注意类的名称前面推荐是Item,禁止乱搞,xiaobang路过)</p><h1 id="创建一个物品"><a href="#创建一个物品" class="headerlink" title="创建一个物品"></a>创建一个物品</h1><p>这里由于我们写的是<code>XenoAge</code>使用我们在这里创建<code>银粒</code>。新建java类<code>item.ItemSilverNugget</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>XenoAge<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>item<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemSilverNugget</span> <span class="token keyword">extends</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token function">ItemSilverNugget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMaxStackSize</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTranslationKey</span><span class="token punctuation">(</span>XenoAge<span class="token punctuation">.</span>MODID <span class="token operator">+</span> <span class="token string">".silvernugget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setRegistryName</span><span class="token punctuation">(</span><span class="token string">"silver_nugget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>setTranslationKey</code>这是新的方法，以前的方法为<code>setUnlocalizedName()</code></li></ul><p><code>setMaxStackSize()</code>这里是设置最大堆叠数目，如果不特殊强调就是默认64(比如说我不写这个方法😀)</p><p>设置注册名字，当你在游戏中想要获得你的物品那就需要这个名字，比如在本教程你需要这样做<code>give @a xenoage:silver_nugget</code>，当然此时如果你启动的话，不出意外会报错</p><h1 id="实例化并注册"><a href="#实例化并注册" class="headerlink" title="实例化并注册"></a>实例化并注册</h1><p>新建java类<code>item.ItemRegistryHandler</code></p><p><code>src/main/java/com/wzhrdx/XenoAge/item/ItemRegistryHandler.java</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>item<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>event<span class="token punctuation">.</span>RegistryEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mod<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>eventhandler<span class="token punctuation">.</span>SubscribeEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>registries<span class="token punctuation">.</span>IForgeRegistry<span class="token punctuation">;</span><span class="token annotation punctuation">@Mod</span><span class="token punctuation">.</span>EventBusSubscriber<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemRegistryHandler</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ItemSilverNugget SILVER_NUGGET <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemSilverNugget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SubscribeEvent</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onRegistry</span><span class="token punctuation">(</span>RegistryEvent<span class="token punctuation">.</span>Register<span class="token operator">&lt;</span>Item<span class="token operator">></span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>IForgeRegistry<span class="token operator">&lt;</span>Item<span class="token operator">></span> registry <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>SILVER_NUGGET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//这里是实例话物品</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="绑定材质"><a href="#绑定材质" class="headerlink" title="绑定材质"></a>绑定材质</h1><p>为<code>ItemRegistryHandler</code>添加一个方法，修改后如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>client<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>block<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ModelResourceLocation<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>item<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>client<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ModelRegistryEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>client<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ModelLoader<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>event<span class="token punctuation">.</span>RegistryEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mod<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>eventhandler<span class="token punctuation">.</span>SubscribeEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>relauncher<span class="token punctuation">.</span>Side<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>relauncher<span class="token punctuation">.</span>SideOnly<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>registries<span class="token punctuation">.</span>IForgeRegistry<span class="token punctuation">;</span><span class="token annotation punctuation">@Mod</span><span class="token punctuation">.</span>EventBusSubscriber<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemRegistryHandler</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ItemSilverNugget SILVER_NUGGET <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemSilverNugget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SubscribeEvent</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onRegistry</span><span class="token punctuation">(</span>RegistryEvent<span class="token punctuation">.</span>Register<span class="token operator">&lt;</span>Item<span class="token operator">></span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>IForgeRegistry<span class="token operator">&lt;</span>Item<span class="token operator">></span> registry <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>SILVER_NUGGET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//这里是实例话物品</span><span class="token annotation punctuation">@SubscribeEvent</span> <span class="token comment" spellcheck="true">//监听net.minecraftforge.client.event.ModelRegistryEvent事件</span><span class="token annotation punctuation">@SideOnly</span><span class="token punctuation">(</span>Side<span class="token punctuation">.</span>CLIENT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onModelRegistry</span><span class="token punctuation">(</span>ModelRegistryEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>ModelLoader<span class="token punctuation">.</span><span class="token function">setCustomModelResourceLocation</span><span class="token punctuation">(</span>SILVER_NUGGET<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ModelResourceLocation</span><span class="token punctuation">(</span>SILVER_NUGGET<span class="token punctuation">.</span><span class="token function">getRegistryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"inventory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//这里是绑定材质</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建包<code>assets.xenoage.models.item</code>，创建json文件<code>silver_nugget.json</code></p><p><code>src/main/resources/assets/xenoage/models/item/silver_nugget.json</code></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"parent"</span><span class="token operator">:</span> <span class="token string">"item/generated"</span><span class="token punctuation">,</span><span class="token property">"textures"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"layer0"</span><span class="token operator">:</span> <span class="token string">"xenoage:items/silver_nugget"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建材质包位置<code>src/main/resources/assets/xenoage/textures/items</code></p><p>将材质放入，材质的名字要和你的注册名字一样这里是<code>silver_nugget.png</code>，”<img src="https://s1.ax1x.com/2020/08/26/dWVxvn.png" alt="dWVxvn.png"></p><p>这里我们运行游戏输入<code>/give @a xenoage:silver_nugget</code>我们就会得到这个物品</p><hr><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li><p><input disabled="" type="checkbox"> </p><blockquote><p>练习1 创建一个名为<code>silver_ingot</code>的物品Java类名为<code>ItemSilverNugget</code>材质图片<img src="https://s1.ax1x.com/2020/08/26/dWAfaD.png" alt="dWAfaD.png"><br>要求1：设置最大堆叠数目为64<br>要求2：设置注册名为<code>silver_ingot</code><br>要求3：设置<code>UnlocalizedName</code>为<code>modid+#</code><br>要求4：将其放入创造栏中</p></blockquote></li><li><p><input disabled="" type="checkbox"> </p><blockquote><p>练习2 注册、实例化物品并注册材质</p></blockquote></li><li><p><input disabled="" type="checkbox"> </p><blockquote><p>练习3 配置json文件使材质正常显示</p></blockquote></li></ul><details><summary>答案1</summary><pre><blockcode> package com.wzhrdx.XenoAge.item;import com.wzhrdx.XenoAge.XenoAge;import com.wzhrdx.XenoAge.creativetab.TabXenoAge;import net.minecraft.item.Item;public class ItemSilverIngot extends Item {public ItemSilverIngot() {this.setMaxStackSize(64);this.setCreativeTab(TabXenoAge.TAB_XENO_AGE);this.setTranslationKey(XenoAge.MODID + ".silveringot");this.setRegistryName("silver_ingot");}}</blockcode></pre> </details><details><summary>答案2</summary><pre><blockcode> //在ItemRegistryHandler对应位置下添加public static Item SILVER_INGOT = new ItemSilverIngot();registry.register(SILVER_INGOT);registerModel(SILVER_INGOT);</blockcode></pre> </details><details><summary>答案3</summary><pre><blockcode> 1.创建assets/xenoage/models/item/silver_ingot.json2.silver_ingot.json{"parent": "item/generated","textures": {"layer0": "xenoage:items/silver_ingot"}}</blockcode></pre> </details>]]></content>
      
      
      <categories>
          
          <category> 我的世界mod开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界mod开发 </tag>
            
            <tag> Forge </tag>
            
            <tag> Mod </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的世界mod开发1.2主类和mod信息</title>
      <link href="posts/9b5d0990.html"/>
      <url>posts/9b5d0990.html</url>
      
        <content type="html"><![CDATA[<p>在这章开始前我们先修改一下信息打开<code>build.gradle</code>找到 </p><pre class="line-numbers language-java"><code class="language-java">version <span class="token operator">=</span> <span class="token string">"1.0"</span>group <span class="token operator">=</span> <span class="token string">"com.yourname.modid"</span>archivesBaseName <span class="token operator">=</span> <span class="token string">"modid"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>version = ‘1.0’</strong> ：模组的<a href="https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E5%8F%B7/7674145?fr=aladdin" target="_blank" rel="noopener">版本号</a>（版本的标识号，<a href="https://cwiki.apache.org/confluence/display/MAVENOLD/Versioning" target="_blank" rel="noopener">Maven的版本号规则</a>，<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本</a>）。</p></li><li><p><strong>group = ‘com.yourname.modid’</strong> ：这是<a href="https://blog.csdn.net/iteye_19209/article/details/82655261?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">GroupID</a>，请遵循<a href="https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7" target="_blank" rel="noopener">命名规则</a>（<a href="http://maven.apache.org/guides/mini/guide-naming-conventions.html" target="_blank" rel="noopener">Maven</a>）。</p></li><li><p><strong>archivesBaseName = ‘modid’</strong> ：这个关联到你最后导出的Jar文件名，直译过来是“归档基本名称”。</p></li></ul><p>了解了意思，大家就应该知道要填什么了吧！</p><blockquote><p>[info] version = ‘ [这里填模组版本号] ‘</p></blockquote><blockquote><p>group = ‘ [填GroupID，要根据你的文件夹填，在工程文件夹（MDK）下的src\main\java下] ‘</p></blockquote><blockquote><p>archivesBaseName = ‘ [填模组ID] ‘</p></blockquote><blockquote><ul><li><strong>group</strong>：java文件夹下你可以找到<code>com\example\examplemod</code>，这是默认的，但我建议重命名为<code>com\[作者名]\[模组ID]</code>（这个不是一个文件夹的名称，在com下的example文件夹重命名为[作者名]，重命名后这个文件夹下的examplemod重命名为模组ID），比如我填的是<code>com.tangguo.pe</code>（每个文件夹名之间用点隔开）。tangguo就是我的名字，pe就是我的模组ID的缩写。那么我的文件夹名就是<code>com\tangguo\pe</code></li></ul></blockquote><blockquote><ul><li><strong>模组ID是什么</strong>：该模组的唯一标识符，不要填写出英文字母与一些半角符号（_）外的其他字符（空格替换为下划线）。必须全小写字母且不得超过64个字符。</p></li></ul></blockquote><blockquote><p><strong><em>（除了模组的本地化外都不要写中文与特殊字符）</em></strong></p></blockquote><p>修改为</p><pre class="line-numbers language-java"><code class="language-java">version <span class="token operator">=</span> <span class="token string">"1.0"</span>group <span class="token operator">=</span> <span class="token string">"com.wzhrdx.xenoage"</span>archivesBaseName <span class="token operator">=</span> <span class="token string">"xenoage"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这篇教程里我将哪出我写的模组的一部分进行讲解</p><p>那么废话不多说，我们开始正题，本人使用的是IDEA</p><h1 id="新建一个主类"><a href="#新建一个主类" class="headerlink" title="新建一个主类"></a>新建一个主类</h1><p>这里我们直接双击<code>ipr</code>文件，然后IDEA就会导入工程了，这里在<code>scr/main/java/</code>下新建一个包<code>com.wzrdx.XenoAge</code></p><p>然后创建一个java类<code>XenoAge</code>,代码如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wzhrdx<span class="token punctuation">.</span>XenoAge<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraft<span class="token punctuation">.</span>init<span class="token punctuation">.</span>Blocks<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mod<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>event<span class="token punctuation">.</span>FMLInitializationEvent<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>minecraftforge<span class="token punctuation">.</span>fml<span class="token punctuation">.</span>common<span class="token punctuation">.</span>event<span class="token punctuation">.</span>FMLPreInitializationEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token annotation punctuation">@Mod</span><span class="token punctuation">(</span>modid <span class="token operator">=</span> XenoAge<span class="token punctuation">.</span>MODID<span class="token punctuation">,</span> name <span class="token operator">=</span> XenoAge<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> version <span class="token operator">=</span> XenoAge<span class="token punctuation">.</span>VERSION<span class="token punctuation">,</span> acceptedMinecraftVersions <span class="token operator">=</span> <span class="token string">"1.12.2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XenoAge</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MODID <span class="token operator">=</span> <span class="token string">"xenoage"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NAME <span class="token operator">=</span> <span class="token string">"Xeno Age"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VERSION <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> Logger logger<span class="token punctuation">;</span><span class="token annotation punctuation">@Mod</span><span class="token punctuation">.</span>EventHandler<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInit</span><span class="token punctuation">(</span>FMLPreInitializationEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>logger <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getModLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Mod</span><span class="token punctuation">.</span>EventHandler<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FMLInitializationEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// some example code</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"DIRT BLOCK >> {}"</span><span class="token punctuation">,</span> Blocks<span class="token punctuation">.</span>DIRT<span class="token punctuation">.</span><span class="token function">getRegistryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>@Mod(modid = “XenoAge”,name = “XenoAge”,version=”1.0”)//modid是Mod的唯一标识符（ID）,name是Mod的名称,version是Mod的版本</p></li><li><p>@Mod.EventHandler 则标识了三个FML事件，三个方法分别对应三个事件，调用proxy的对应方法。</p></li><li><ul><li>含有<code>FMLPreInitializationEvent</code>参数的方法（这里是<code>preInit</code>）在所有Mod初始化之前调用，<strong>这时候应该加载配置文件，实例化物品和方块，并注册它们</strong>。</li></ul></li><li><ul><li>含有<code>FMLInitializationEvent</code>参数的方法（这里是<code>init</code>）用于该Mod的初始化，<strong>这时候应该为Mod进行设置，如注册合成表和烧炼系统，并且向其他Mod发送交互信息</strong>。</li></ul></li><li><ul><li>含有<code>FMLPostInitializationEvent</code>参数的方法（这里是<code>postInit</code>）在所有Mod都初始化之后调用，<strong>这时候应该接收其他Mod发送的交互信息，并完成对Mod的设置</strong>。</li></ul></li></ul><p>这样我们就完成第一步了</p><h1 id="完善你的mod信息"><a href="#完善你的mod信息" class="headerlink" title="完善你的mod信息"></a>完善你的mod信息</h1><p>打开<code>src/main/resources/mcmod.info</code></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"modid"</span><span class="token operator">:</span> <span class="token string">"examplemod"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Example Mod"</span><span class="token punctuation">,</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Example placeholder mod."</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"${version}"</span><span class="token punctuation">,</span><span class="token property">"mcversion"</span><span class="token operator">:</span> <span class="token string">"${mcversion}"</span><span class="token punctuation">,</span><span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"updateUrl"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"authorList"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ExampleDude"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"credits"</span><span class="token operator">:</span> <span class="token string">"The Forge and FML guys, for making this example"</span><span class="token punctuation">,</span><span class="token property">"logoFile"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"screenshots"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"modid"</span><span class="token operator">:</span> <span class="token string">"xenoage"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Xeno Age"</span><span class="token punctuation">,</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"It's a 1.12.2 mod"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"${version}"</span><span class="token punctuation">,</span><span class="token property">"mcversion"</span><span class="token operator">:</span> <span class="token string">"${mcversion}"</span><span class="token punctuation">,</span><span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"updateUrl"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"authorList"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"wzhrdx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"credits"</span><span class="token operator">:</span> <span class="token string">"The Forge and FML guys, for making this example"</span><span class="token punctuation">,</span><span class="token property">"logoFile"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token property">"screenshots"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 我的世界mod开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界mod开发 </tag>
            
            <tag> Forge </tag>
            
            <tag> Mod </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的世界mod开发1.1一切的开始</title>
      <link href="posts/efb357db.html"/>
      <url>posts/efb357db.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-12-2构建方法"><a href="#1-12-2构建方法" class="headerlink" title="1.12.2构建方法:"></a><strong>1.12.2构建方法:</strong></h3><p>首先我们打开<a href="https://files.minecraftforge.net/maven/net/minecraftforge/forge/index_1.12.2.html" target="_blank" rel="noopener">Minecraft Forge</a>官网，然后我们找到1.12.2 - 14.23.5.2768的src包，然后点mdk，如果下载不了请点mdk后面的感叹号<code>(这里请支持一下forge，点击mdk下载)</code>(如果你实在是懒你可以点击<a href="https://files.minecraftforge.net/maven/net/minecraftforge/forge/1.12.2-14.23.5.2768/forge-1.12.2-14.23.5.2768-mdk.zip" target="_blank" rel="noopener">这里</a>)</p><p>然后我们找到<code>build.gradle</code>文件打开然后找到大约26行的位置修改，将如下内容替换<code>// stable_# Stables are built at the discretion of the MCP team.</code></p><p>修改后内容<code>stable_39</code>然后我们在改目录下运行</p><pre class="line-numbers language-bash"><code class="language-bash">./gradlew setupDecompWorkspace <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你使用的cmd运行</p><pre class="line-numbers language-bash"><code class="language-bash">gradlew.bat setupDecompWorkspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你使用的是eclipse那么就省事了直接运行</p><pre class="line-numbers language-bash"><code class="language-bash">./gradlew eclipse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然了如果你使用的是<code>IntelliJIDEA</code>那也没有事(IDEA NB!)运行</p><pre class="line-numbers language-bash"><code class="language-bash">./gradlew idea<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">./gradlew genIntellijRuns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要运行客户端，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">./gradlew runClient<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要运行服务端，运行：</p><pre class="line-numbers language-bash"><code class="language-bash">./gradlew runServer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想构建并发布你的Mod，运行下面的命令：</p><pre class="line-numbers language-bash"><code class="language-bash">./gradlew build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上我们的mod就构建完成了</p>]]></content>
      
      
      <categories>
          
          <category> 我的世界mod开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的世界mod开发 </tag>
            
            <tag> Forge </tag>
            
            <tag> Mod </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux安装</title>
      <link href="posts/ac54a9a5.html"/>
      <url>posts/ac54a9a5.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]<br>Kali 是一个 Linux 发行版。与任何一个其它的 Linux 发行版一样，你可以将它永久安装到一个硬盘上。那样它会工作的更好，但是你不能将它作为一个日常使用的操作系统。因为它是为渗透测试构建的，这就是你使用它的全部理由。</p><p>最好是将 Kali 制作为自启动发行版。你可以将 Kali 刻录到一张 DVD 或者是制作到一个自启动 U 盘上来运行它。你没有必要在一个 Kali 上安装任何软件或者保存任何文件。你可以在需要测试一个系统时随时来启动它。它也有非常好的灵活性，可以让运行 Kali 的机器随时运行在想要测试的网络上。<br>Kali 里面有很多的安全工具而不是别的。这就是它能做的事。不管怎么说，Kali 就是一个安全工具。</p><h1 id="安装至硬盘（安装至虚拟机在下面）"><a href="#安装至硬盘（安装至虚拟机在下面）" class="headerlink" title="安装至硬盘（安装至虚拟机在下面）"></a>安装至硬盘（安装至虚拟机在下面）</h1><h2 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a><strong>硬件要求</strong></h2><p>Kali 系统对硬件有一些最基本的要求及建议。根据用户使用目的，你可以使有更高的配置。这篇文章中假设读者想要把 kali 安装为电脑上唯一的操作系统。</p><ol><li> 至少 10GB 的磁盘空间；强烈建议分配更多的存储空间。</li><li> 至少 512MB 的内存；希望有更多的内存，尤其是在图形界面下。</li><li> 支持 USB 或 CD/DVD 启动方式。</li><li> Kali Linux 系统 ISO 镜像下载地址 <a href="https://www.kali.org/downloads/%E3%80%82" target="_blank" rel="noopener">https://www.kali.org/downloads/。</a></li></ol><h2 id="创建-USB-启动工具"><a href="#创建-USB-启动工具" class="headerlink" title="创建 USB 启动工具"></a><strong>创建 USB 启动工具</strong></h2><p>这里我们使用<a href="http://rufus.akeo.ie/?locale=zh_CN" target="_blank" rel="noopener">rufus</a><br>蓝奏云链接 <a href="https://wwa.lanzous.com/imrMGfofyxg" target="_blank" rel="noopener">https://wwa.lanzous.com/imrMGfofyxg</a><br>Rufus 是一个开源免费的快速制作 U 盘系统启动盘和格式化 USB 的实用小工具，它可以快速把 ISO 格式的系统镜像文件快速制作成可引导的 USB 启动安装盘，支持 Windows 或 Linux 启动。</p><h2 id="全新安装-Kali-Linux-系统"><a href="#全新安装-Kali-Linux-系统" class="headerlink" title="全新安装 Kali Linux 系统"></a><strong>全新安装 Kali Linux 系统</strong></h2><p>1、 首先，把 USB 设备插入到要安装 Kali 操作系统的电脑上，然后从 USB 设备引导系统启动。只要成功地从 USB 设备启动系统，你将会看到下面的图形界面，选择“Install”或者“Graphical Install”选项。<br><code>Graphical Install</code>是可视化安装<br>本指南将使用“Graphical Install”方式进行安装。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123447n6urwtb33rfzdwjz.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>Kali Linux 启动菜单</em></p><p>2、 下面几个界面将会询问用户选择区域设置信息，比如语言、国家，以及键盘布局。</p><p>选择完成之后，系统将会提示用户输入主机名和域名信息。输入合适的环境信息后，点击继续安装。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123447ao2m9m4qce668kec.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>设置 Kali Linux 系统的主机名</em></p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123447zxzzccgh3ghk8ixi.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>设置 Kali Linux 系统的域名</em></p><p>3、 主机名和域名设置完成后，需要设置 root 用户的密码。请勿忘记该密码。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123448p71uz77nexqquh7q.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>设置 Kali Linux 系统用户密码</em></p><p>4、 密码设置完成之后，安装步骤会提示用户选择时区然后停留在硬盘分区界面。</p><p>如果 Kali Linux 是这个电脑上的唯一操作系统，最简单的选项就是使用“Guided – Use Entire Disk”，然后选择你需要安装 Kali 的存储设备。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123448tv2o7d3bbogwhchc.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>选择 Kali Linux 系统安装类型</em></p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123449vxrgrex0tr4k1ege.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>选择 Kali Linux 安装磁盘</em></p><p>5、 下一步将提示用户在存储设备上进行分区。大多数情况下，我们可以把整个系统安装在一个分区内。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123449wb300b0yh063b4b4.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>在分区上安装 Kali Linux 系统</em></p><p>6、 最后一步是提示用户确认将所有的更改写入到主机硬盘。注意，点确认后将会<strong>清空整个磁盘上的所有数据</strong>。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123450hkt5mtzta83ldl8d.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>确认磁盘分区更改</em></p><p>7、 一旦确认分区更改，安装包将会进行复制文件的安装过程。安装完成后，你需要设置一个网络镜像源来获取软件包和系统更新。如果你希望使用 Kali 的软件库，确保开启此功能。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123451kv801zjff08v4v10.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>配置 Kali Linux 包管理器</em></p><p>8、 选择网络镜像源后，系统将会询问你安装 Grub 引导程序。再次说明，本文假设你的电脑上仅安装唯一的 Kali Linux 操作系统。</p><p>在该屏幕上选择“Yes”，用户需要选择要写入引导程序信息的硬盘引导设备。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123452zwkmnqqqqmh297w3.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>安装 Grub 引导程序</em></p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123452nvbs7hgsz8u3pu7h.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>选择安装 Grub 引导程序的分区</em></p><p>9、 当 Grub 安装完成后，系统将会提醒用户重启机器以进入新安装的 Kali Linux 系统。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123453x862e0057m56e37j.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>Kali Linux 系统安装完成</em></p><p>10、 因为本指南使用 Enlightenment 作为 Kali Linux 系统的桌面环境，因此默认情况下是启动进入到<a href="https://www.linuxcool.com/" target="_blank" rel="noopener" title="shell">shell</a>环境。</p><p>使用 root 账号及之前安装过程中设置的密码登录系统，以便运行 Enlightenment 桌面环境。</p><p>登录成功后输入命令startx进入 Enlightenment 桌面环境。</p><pre><code># startx</code></pre><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123453t4cq69s4bhnzik4l.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>Kali Linux 下进入 Enlightenment 桌面环境</em></p><p>初次进入 Enlightenment 桌面环境时，它将会询问用户进行一些首选项配置，然后再运行桌面环境。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/11/123455bwc9y99dhmxcq67w.png" alt="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南" title="全新 Kali Linux 系统安装指南全新 Kali Linux 系统安装指南"></p><p><em>Kali Linux Enlightenment 桌面</em></p><p>此时，你已经成功地安装了 Kali Linux 系统，并可以使用了。后续的文章我们将探讨 Kali 系统中一些有用的工具以及如何使用这些工具来探测主机及网络方面的安全状况。</p><hr><p>原文来自：<a href="https://linux.cn/article-7986-1.html" target="_blank" rel="noopener">https://linux.cn/article-7986-1.html</a></p><hr><h2 id="安装-Kali-Linux-Windows双系统"><a href="#安装-Kali-Linux-Windows双系统" class="headerlink" title="安装 Kali Linux Windows双系统"></a><strong>安装 Kali Linux Windows双系统</strong></h2><p>自己上网上找教程，异曲同工<br><img src="https://s1.ax1x.com/2020/10/07/0dWmlR.jpg"></p><h1 id="安装至虚拟机"><a href="#安装至虚拟机" class="headerlink" title="安装至虚拟机"></a>安装至虚拟机</h1><p>废话不多说，直接开始教程</p><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a><strong>安装虚拟机</strong></h2><h3 id="虚拟机的选择"><a href="#虚拟机的选择" class="headerlink" title="虚拟机的选择"></a>虚拟机的选择</h3><h4 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V"></a>Hyper-V</h4><p>如果你说windows 10 你可以选择他自带的<code>Hyper-V</code><br>Hyper-V是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF" target="_blank" rel="noopener">微软</a>的一款虚拟化产品，是微软第一个采用类似Vmware ESXi和Citrix Xen的基于hypervisor的技术。</p><hr><h4 id="VMware-Workstation"><a href="#VMware-Workstation" class="headerlink" title="VMware Workstation"></a>VMware Workstation</h4><p>VMware Workstation允许<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener"><strong>操作系统</strong></a>(OS)和应用程序(Application)在一台<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA" target="_blank" rel="noopener">虚拟机</a>内部运行。虚拟机是独立运行<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">主机操作系统</a>的离散环境。在 VMware Workstation 中，你可以在一个窗口中加载一台虚拟机，它可以运行自己的操作系统和应用程序。你可以在运行于桌面上的多台虚拟机之间切换，通过一个网络共享虚拟机(例如一个公司局域网)，挂起和恢复虚拟机以及退出虚拟机，这一切不会影响你的主机操作和任何操作系统或者其它正在运行的应用程序。</p><hr><h3 id="安装虚拟机-1"><a href="#安装虚拟机-1" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><h4 id="Hyper-V-1"><a href="#Hyper-V-1" class="headerlink" title="Hyper-V"></a>Hyper-V</h4><ol><li>打开控制面板选择程序<img src="https://s1.ax1x.com/2020/10/07/0dWlTO.png"></li><li> 选择启用或关闭windows功能<img src="https://s1.ax1x.com/2020/10/07/0dWep9.png"></li><li> 选择Hyper-y<img src="https://s1.ax1x.com/2020/10/07/0dWVfJ.png"></li><li>在Hyper-y中创建kali的虚拟机</li></ol><hr><h4 id="VMware-Workstation-1"><a href="#VMware-Workstation-1" class="headerlink" title="VMware Workstation"></a>VMware Workstation</h4><p>下载VMware Workstation，VMware Workstation的安装简单，就不特殊介绍了<br><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p><hr><h2 id="安装Kali"><a href="#安装Kali" class="headerlink" title="安装Kali"></a><strong>安装Kali</strong></h2><p>下载<a href="https://www.kali.org/downloads" target="_blank" rel="noopener">Kali Linux</a><br>这里我们使用VMware Workstation做安装示范<br><img src="https://s1.ax1x.com/2020/10/07/0dWQ0K.png"><br>选择自定义<img src="https://s1.ax1x.com/2020/10/07/0dWMm6.png"><br>选择稍后安装镜像<img src="https://s1.ax1x.com/2020/10/07/0dWuOx.png"><br>选择系统，这里我现在Debian10.x<img src="https://s1.ax1x.com/2020/10/07/0dW3kD.png"><br>一直点下一步到选择虚拟机的内存<img src="https://s1.ax1x.com/2020/10/07/0dW8te.png"><br>分配2GB就可以了，这里我为了更加流畅选择4GB<br>选择NAT模式<img src="https://s1.ax1x.com/2020/10/07/0dWYpd.png"><br>一直点下一步至选择磁盘<img src="https://s1.ax1x.com/2020/10/07/0dWGfH.png"><br>选择创建新虚拟磁盘，下一步![]<a href="https://s1.ax1x.com/2020/10/07/0dWt1A.png" target="_blank" rel="noopener">https://s1.ax1x.com/2020/10/07/0dWt1A.png</a>)<br>一直点下一步，至完成<br>编辑虚拟机设置<img src="https://s1.ax1x.com/2020/10/07/0dWUXt.png"><br>选择cd选择使用ISO映像文件<img src="https://s1.ax1x.com/2020/10/07/0dWdnP.png"><br>安装过程详见<code>安装至硬盘</code>的 <strong>全新安装 Kali Linux 系统</strong></p>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> Linux </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux渗透测试和Kali Linux简介</title>
      <link href="posts/47f09587.html"/>
      <url>posts/47f09587.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Linux渗透测试简介"><a href="#Linux渗透测试简介" class="headerlink" title="Linux渗透测试简介"></a>Linux渗透测试简介</h1><p>渗透测试 (penetration test)并没有一个标准的定义，国外一些安全组织达成共识的通用说法是：渗透测试是通过模拟恶意<a href="https://baike.baidu.com/item/%E9%BB%91%E5%AE%A2" target="_blank" rel="noopener">黑客</a>的攻击方法，来评估<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">计算机网络系统</a>安全的一种评估方法。这个过程包括对系统的任何弱点、技术缺陷或漏洞的主动分析，这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件主动利用安全漏洞。</p><p>换句话来说，渗透测试是指渗透人员在不同的位置（比如从内网、从外网等位置）利用各种手段对某个特定网络进行测试，以期发现和挖掘系统中存在的漏洞，然后输出渗透测试报告，并提交给网络所有者。网络所有者根据渗透人员提供的渗透测试报告，可以清晰知晓系统中存在的安全隐患和问题。</p><h2 id="渗透测试分类"><a href="#渗透测试分类" class="headerlink" title="渗透测试分类"></a><strong>渗透测试分类</strong></h2><h3 id="方法分类"><a href="#方法分类" class="headerlink" title="方法分类"></a><strong>方法分类</strong></h3><p><strong>1、黑箱测试</strong></p><p>黑箱测试又被称为所谓的“Zero-Knowledge Testing”，渗透者完全处于对系统一无所知的状态，通常这类型测试，最初的信息获取来自于DNS、Web、Email及各种公开对外的服务器。</p><p><strong>2、</strong><a href="https://baike.baidu.com/item/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">白盒测试</a></p><p><a href="https://baike.baidu.com/item/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener">白盒测试</a>与黑箱测试恰恰相反，测试者可以通过正常渠道向被测单位取得各种资料，包括网络拓扑、员工资料甚至网站或其它程序的代码片段，也能够与单位的其它员工（销售、<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%91%98" target="_blank" rel="noopener">程序员</a>、管理者……）进行面对面的沟通。这类测试的目的是模拟企业内部雇员的越权操作。</p><p><strong>3、隐秘测试</strong></p><p>隐秘测试是对被测单位而言的，通常情况下，接受渗透测试的单位网络管理部门会收到通知：在某些时段进行测试。因此能够监测网络中出现的变化。但隐秘测试则被测单位也仅有极少数人知晓测试的存在，因此能够有效地检验单位中的信息安全事件监控、响应、恢复做得是否到位。<br>引用自<a href="https://baike.baidu.com/item/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/7363639" target="_blank" rel="noopener">百度百科</a></p><h3 id="目标分类"><a href="#目标分类" class="headerlink" title="目标分类"></a><strong>目标分类</strong></h3><p><strong>1、</strong><a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">主机操作系统</a>渗透</p><p>对Windows、Solaris、AIX、Linux、SCO、SGI等操作系统本身进行渗透测试。</p><p><strong>2、</strong><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">数据库系统</a>渗透</p><p>对MS-SQL、Oracle、MySQL、Informix、Sybase、DB2、Access等<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">数据库应用系统</a>进行渗透测试。</p><p><strong>3、应用系统渗透</strong></p><p>对渗透目标提供的各种应用，如ASP、CGI、JSP、PHP等组成的WWW应用进行渗透测试。</p><p><strong>4、网络设备渗透</strong></p><p>对各种防火墙、<a href="https://baike.baidu.com/item/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">入侵检测系统</a>、<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87" target="_blank" rel="noopener">网络设备</a>进行渗透测试。</p><h2 id="安全审查"><a href="#安全审查" class="headerlink" title="安全审查"></a><strong>安全审查</strong></h2><p>渗透测试旨在证明，网络防御机制的运行与你认为的一样良好。往往系统和<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98" target="_blank" rel="noopener">网络管理员</a>视审查人员或渗透人员为敌人，但实际上他们却是朋友。到位的渗透测试可以证明你的防御确实有效，或者查出问题，帮助你阻挡未来攻击。出钱请自己知道的人来发现网络中的漏洞，总比让自己不知道的人发现漏洞好得多。</p><p>渗透测试可以用来向第三方，譬如投资方或者你的管理人员提供网络安全状况方面的具体证据。事实上，你知道网络中存在的漏洞可能已有一段时日，但无法说服管理人员分配必要资源以补救漏洞。光靠自己，网络或安全管理员的意见往往不会被董事会采纳。如果外面的顾问赞同你的评估，或许会有奇迹出现。</p><p>有关渗透测试的合同或工作说明应该包括你从所得报告中想要获得的各个方面。如果你请人进行有限的测试，得到的只是计算机生成的报告。而渗透测试的真正价值在于由报告所衍生出的分析。进行测试的一方会详细介绍发现结果，并说明其重要性。在有的地方，测试人员还会提议采取何种补救方法，譬如更新服务器、禁用网络服务、改变<a href="https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99" target="_blank" rel="noopener">防火墙</a>规则等等。</p><h2 id="发展"><a href="#发展" class="headerlink" title="** 发展**"></a>** 发展**</h2><p>如今，大多数攻击进行的是最基本的<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">漏洞扫描</a>，如果攻击得逞，目标就岌岌可危。如果攻击者企图对你站点进行<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">漏洞扫描</a>，他就会获得大量的<a href="https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99" target="_blank" rel="noopener">防火墙</a>日志消息，而监控网络的任何<a href="https://baike.baidu.com/item/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">入侵检测系统</a>（IDS）也会开始发送有关当前攻击的警报。如果你还没有试过，不妨利用<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8" target="_blank" rel="noopener">漏洞扫描器</a>结合IDS对网络来一番试验。别忘了首先获得对方的许可，因为，运行<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8" target="_blank" rel="noopener">漏洞扫描器</a>会使IDS引发警报。</p><p>渗透测试也许是你的网络防御工具箱当中的重要武器之一。应该视之为各种安全审查的一部分，但要确保审查人员胜任这项工作。</p><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="** 测试方法**"></a>** 测试方法**</h2><p>有些渗透测试人员通过使用两套扫描器进行安全评估。这些工具至少能够使整个过程实现部分自动化，这样，技术娴熟的专业人员就可以专注于所发现的问题。如果探查得更深入，则需要连接到任何可疑服务，某些情况下，还要利用<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">漏洞</a>。</p><p>商用<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">漏洞扫描</a>工具在实际应用中存在一个重要的问题：如果它所做的测试未能获得肯定答案，许多产品往往会隐藏测试结果。譬如，有一款知名扫描器就存在这样的缺点：要是它无法进入Cisco<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8" target="_blank" rel="noopener">路由器</a>，或者无法用SNMP获得其<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%8F%B7" target="_blank" rel="noopener">软件版本号</a>，它就不会做出这样的警告：该路由器容易受到某些拒绝服务（DoS）攻击。如果不知道扫描器隐藏了某些信息（譬如它无法对某种<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">漏洞</a>进行测试），你可能误以为网络是安全的，而实际上，网络的安全状况可能是危险的。</p><p>除了找到合适工具以及具备资质的组织进行渗透测试外，还应该准确确定测试范围。攻击者会借助社会工程学、偷窃、贿赂或者破门而入等手法，获得有关信息。真正的攻击者是不会仅仅满足于攻击某个企业网络的。通过该网络再攻击其它公司往往是<a href="https://baike.baidu.com/item/%E9%BB%91%E5%AE%A2" target="_blank" rel="noopener">黑客</a>的惯用伎俩。攻击者甚至会通过这种方法进入企业的ISP。</p><h2 id="测试技巧"><a href="#测试技巧" class="headerlink" title="测试技巧"></a><strong>测试技巧</strong></h2><p>为了从渗透测试上获得最大价值，应该向测试组织提供尽可能详细的信息。这些组织同时会签署保密协议，这样，你就可以更放心地共享策略、程序及有关网络的其它关键信息。</p><p>还要确定的是，哪些系统需要测试。虽然你不想漏掉可能会受到攻击的某个系统，但可能仍想分阶段把渗透测试外包出去，以便每个阶段专注于网络的不同部分。</p><p>你还应该制订<a href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E5%87%86%E5%88%99" target="_blank" rel="noopener">测试准则</a>，譬如说：渗透测试人员可以探查漏洞并进行测试，但不得利用，因为这可能会危及到你想要保护的系统。</p><p>此外，你还要提供合适的测试途径。如果你想测试在非军事区（DMZ）里面的系统，最好的测试地方就是在<a href="https://baike.baidu.com/item/%E5%90%8C%E4%B8%80%E4%B8%AA%E7%BD%91%E6%AE%B5" target="_blank" rel="noopener">同一个网段</a>内测试。让渗透测试人员在<a href="https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99" target="_blank" rel="noopener">防火墙</a>外面进行测试听起来似乎更实际，但内部测试可以大大提高发现防火墙原本隐藏的服务器<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">安全漏洞</a>的可能性。因为，一旦<a href="https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99" target="_blank" rel="noopener">防火墙</a>设置出现变动，就有可能暴露这些<a href="https://baike.baidu.com/item/%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">漏洞</a>，或者有人可能通过漏洞，利用一台DMZ服务器攻击其它服务器。还记得<a href="https://baike.baidu.com/item/%E5%B0%BC%E5%A7%86%E8%BE%BE%E7%97%85%E6%AF%92" target="_blank" rel="noopener">尼姆达病毒</a>吗？它就是首次攻击得逞后、利用一台Web服务器发动其它攻击的。</p><p>以外部需要访问的Web或应用服务器为例，你应该考虑与渗透测试人员共享这些应用的<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">源代码</a>，如果测试涉及这些脚本或程序的话。没有<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">源代码</a>，很难测试ASP或CGI脚本，事先认定攻击者根本不会看到源代码是不明智的。Web<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6" target="_blank" rel="noopener">服务器软件</a>里面的漏洞往往会把<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">脚本</a>和应用暴露在远程攻击者面前。如果能够获得应用的<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">源代码</a>，则可以提高测试该应用的效率。毕竟，你出钱是为了让渗透测试人员查找漏洞，而不是浪费他们的时间。<br>源自<a href="https://baike.baidu.com/item/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/7363639" target="_blank" rel="noopener">百度百科</a></p><h1 id="Kali-Linux简介"><a href="#Kali-Linux简介" class="headerlink" title="Kali Linux简介"></a>Kali Linux简介</h1><p>Kali Linux是基于<a href="https://baike.baidu.com/item/Debian/748667" target="_blank" rel="noopener">Debian</a>的Linux发行版， 设计用于数字取证操作系统。由Offensive Security Ltd维护和资助。最先由Offensive Security的Mati Aharoni和Devon Kearns通过重写BackTrack来完成，BackTrack是他们之前写的用于取证的Linux发行版 。</p><p>Kali Linux预装了许多渗透测试软件，包括nmap 、Wireshark 、John the Ripper，以及Aircrack-ng 。用户可通过硬盘、live CD或live USB运行Kali Linux。Kali Linux既有32位和64位的镜像。可用于x86 指令集。同时还有基于ARM架构的镜像，可用于树莓派和三星的ARM Chromebook</p><p>2020年Kali Linux的最新版本为2020.2。<img src="https://s1.ax1x.com/2020/10/07/0dWn61.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> Linux </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记(四)</title>
      <link href="posts/63a9cc99.html"/>
      <url>posts/63a9cc99.html</url>
      
        <content type="html"><![CDATA[<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>使用命令的输出作为可执行文件的输入参数<br><code>$ ./vulnerable </code>your_command_here<code> </code><br><code>$ ./vulnerable $(your_command_here)</code><br>使用命令作为输入<br><code>$ your_command_here | ./vulnerable</code><br>将命令行输出写入文件<br><code>$ your_command_here &gt; filename</code><br>使用文件作为输入<br><code>$ ./vulnerable &lt; filename</code></p><h2 id="核心转储"><a href="#核心转储" class="headerlink" title="核心转储"></a>核心转储</h2><p>当程序运行的过程中异常终止或崩溃，操作系统会将程序当时的内存、寄存器状态、堆栈指针、内存管理信息等记录下来，保存在一个文件中，这种行为就叫做核心转储（Core Dump）。</p><h2 id="会产生核心转储的信号"><a href="#会产生核心转储的信号" class="headerlink" title="会产生核心转储的信号"></a>会产生核心转储的信号</h2><table><thead><tr><th align="left">Signal</th><th align="left">Action</th><th align="left">Comment</th></tr></thead><tbody><tr><td align="left">SIGQUIT</td><td align="left">Core</td><td align="left">Quit from keyboard</td></tr><tr><td align="left">SIGILL</td><td align="left">Core</td><td align="left">Illegal Instruction</td></tr><tr><td align="left">SIGABRT</td><td align="left">Core</td><td align="left">Abort signal from abort</td></tr><tr><td align="left">SIGSEGV</td><td align="left">Core</td><td align="left">Invalid memory reference</td></tr><tr><td align="left">SIGTRAP</td><td align="left">Core</td><td align="left">Trace/breakpoint trap</td></tr></tbody></table><h2 id="开启核心转储"><a href="#开启核心转储" class="headerlink" title="开启核心转储"></a>开启核心转储</h2><p>输入命令 <code>ulimit -c</code>，输出结果为<code> 0</code>，说明默认是关闭的。<br>输入命令 <code>ulimit -c unlimited </code>即可在当前终端开启核心转储功能。<br>如果想让核心转储功能永久开启，可以修改文件 <code>/etc/security/limits.conf</code>，增加一行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#&lt;domain>      &lt;type>  &lt;item>         &lt;value></span>*               soft    core            unlimited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改转储文件保存路径"><a href="#修改转储文件保存路径" class="headerlink" title="修改转储文件保存路径"></a>修改转储文件保存路径</h2><p>• 通过修改 <code>/proc/sys/kernel/core_uses_pid</code>，可以使生成的核心转储文件名变为 <code>core.[pid]</code> 的模式。<br><code># echo 1 &gt; /proc/sys/kernel/core_uses_pid</code><br>• 还可以修改 <code>/proc/sys/kernel/core_pattern</code> 来控制生成核心转储文件的保存位置和文件名格式。<br><code># echo /tmp/core-%e-%p-%t &gt; /proc/sys/kernel/core_pattern</code><br>此时生成的文件保存在<code> /tmp/</code> 目录下，文件名格式为<code> core-[filename]-[pid]-[time]</code>。</p><h2 id="使用-gdb-调试核心转储文件"><a href="#使用-gdb-调试核心转储文件" class="headerlink" title="使用 gdb 调试核心转储文件"></a>使用 gdb 调试核心转储文件</h2><p><code>gdb [filename] [core file]</code></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记(三)</title>
      <link href="posts/99ea2396.html"/>
      <url>posts/99ea2396.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p>在 Linux 系统中一切皆可以看成是文件，文件又分为：普通文件、目录文件、链接文件和设备文件。文件描述符（file descriptor）是内核管理已被打开的文件所创建的索引，使用一个非负整数来指代被打开的文件。<br>标准文件描述符如下：</p><table><thead><tr><th align="left">文件描述符</th><th align="left">用途</th><th align="left">stdio 流</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">标准输入</td><td align="left">stdin</td></tr><tr><td align="left">1</td><td align="left">标准输出</td><td align="left">stdout</td></tr><tr><td align="left">2</td><td align="left">标准错误</td><td align="left">stderr</td></tr></tbody></table><p>当一个程序使用 fork() 生成一个子进程后，子进程会继承父进程所打开的文件表，此时，父子进程使用同一个文件表，这可能导致一些安全问题。如果使用 vfork()，子进程虽然运行于父进程的空间，但拥有自己的进程表项。</p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>• 使用命令的输出作为可执行文件的输入参数</p><pre class="line-numbers language-bash"><code class="language-bash">$ ./vulnerable <span class="token variable"><span class="token variable">`</span>your_command_here<span class="token variable">`</span></span> 或者$ ./vulnerable <span class="token variable"><span class="token variable">$(</span>your_command_here<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>• 使用命令作为输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ your_command_here <span class="token operator">|</span> ./vulnerable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>• 将命令行输出写入文件</p><pre class="line-numbers language-bash"><code class="language-bash">$ your_command_here <span class="token operator">></span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>• 使用文件作为输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ ./vulnerable <span class="token operator">&lt;</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>目前计算机中采用两种字节存储机制：大端（Big-endian）和小端（Little-endian）。<br><code>    MSB (Most Significan Bit/Byte)：最重要的位或最重要的字节。</code><br><code>    LSB (Least Significan Bit/Byte)：最不重要的位或最不重要的字节。</code><br>Big-endian 规定 MSB 在存储时放在低地址，在传输时放在流的开始；LSB 存储时放在高地址，在传输时放在流的末尾。Little-endian 则相反。常见的 Intel 处理器使用 Little-endian，而 PowerPC 系列处理器则使用 Big-endian，另外 TCP/IP 协议和 Java 虚拟机的字节序也是 Big-endian。<br>例如十六进制整数 0x12345678 存入以 1000H 开始的内存中：<br><img src="https://s1.ax1x.com/2020/06/25/NBD9je.png" alt="图片"><br><code>图片来自firmianay</code><br>我们在内存中实际地看一下，在地址<code>0xffffd584</code> 处有字符<code>1234</code>，在地址<code>0xffffd588</code>处有字符<code>5678</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">gdb-peda$ x/w 0xffffd5840xffffd584:     0x34333231gdb-peda$ x/4wb 0xffffd5840xffffd584:     0x31    0x32    0x33    0x34gdb-peda$ python print<span class="token punctuation">(</span><span class="token string">'\x31\x32\x33\x34'</span><span class="token punctuation">)</span>1234gdb-peda$ x/w 0xffffd5880xffffd588:     0x38373635gdb-peda$ x/4wb 0xffffd5880xffffd588:     0x35    0x36    0x37    0x38gdb-peda$ python print<span class="token punctuation">(</span><span class="token string">'\x35\x36\x37\x38'</span><span class="token punctuation">)</span>5678gdb-peda$ x/2w 0xffffd5840xffffd584:     0x34333231      0x38373635gdb-peda$ x/8wb 0xffffd5840xffffd584:     0x31    0x32    0x33    0x34    0x35    0x36    0x37    0x38gdb-peda$ python print<span class="token punctuation">(</span><span class="token string">'\x31\x32\x33\x34\x35\x35\x36\x37\x38'</span><span class="token punctuation">)</span>123455678db-peda$ x/s 0xffffd5840xffffd584:     <span class="token string">"12345678"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记(二)</title>
      <link href="posts/e71903bd.html"/>
      <url>posts/e71903bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="根目录结构"><a href="#根目录结构" class="headerlink" title="根目录结构"></a>根目录结构</h2><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">uname</span> -aLinux manjaro 4.11.5-1-ARCH <span class="token comment" spellcheck="true">#1 SMP PREEMPT Wed Jun 14 16:19:27 CEST 2017 x86_64 GNU/Linux</span>$ <span class="token function">ls</span> -al /drwxr-xr-x  17 root root  4096 Jun 28 20:17 <span class="token keyword">.</span>drwxr-xr-x  17 root root  4096 Jun 28 20:17 <span class="token punctuation">..</span>lrwxrwxrwx   1 root root     7 Jun 21 22:44 bin -<span class="token operator">></span> usr/bindrwxr-xr-x   4 root root  4096 Aug 10 22:50 bootdrwxr-xr-x  20 root root  3140 Aug 11 11:43 devdrwxr-xr-x 101 root root  4096 Aug 14 13:54 etcdrwxr-xr-x   3 root root  4096 Apr  8 19:59 homelrwxrwxrwx   1 root root     7 Jun 21 22:44 lib -<span class="token operator">></span> usr/liblrwxrwxrwx   1 root root     7 Jun 21 22:44 lib64 -<span class="token operator">></span> usr/libdrwx------   2 root root 16384 Apr  8 19:55 lost+founddrwxr-xr-x   2 root root  4096 Oct  1  2015 mntdrwxr-xr-x  15 root root  4096 Jul 15 20:10 optdr-xr-xr-x 267 root root     0 Aug  3 09:41 procdrwxr-x---   9 root root  4096 Jul 22 22:59 rootdrwxr-xr-x  26 root root   660 Aug 14 21:08 runlrwxrwxrwx   1 root root     7 Jun 21 22:44 sbin -<span class="token operator">></span> usr/bindrwxr-xr-x   4 root root  4096 May 28 22:07 srvdr-xr-xr-x  13 root root     0 Aug  3 09:41 sysdrwxrwxrwt  36 root root  1060 Aug 14 21:27 tmpdrwxr-xr-x  11 root root  4096 Aug 14 13:54 usrdrwxr-xr-x  12 root root  4096 Jun 28 20:17 var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于不同的发行版会有略微的不同，我们这里使用的是基于 Arch 的发行版 Manjaro，以上就是根目录下的内容，我们介绍几个重要的目录：<br>• /bin、/sbin：链接到 /usr/bin，存放 Linux 一些核心的二进制文件，其包含的命令可在 shell 上运行。<br>• /boot：操作系统启动时要用到的程序。<br>• /dev：包含了所有 Linux 系统中使用的外部设备。需要注意的是这里并不是存放外部设备的驱动程序，而是一个访问这些设备的端口。<br>• /etc：存放系统管理时要用到的各种配置文件和子目录。<br>• /etc/rc.d：存放 Linux 启动和关闭时要用到的脚本。<br>• /home：普通用户的主目录。<br>• /lib、/lib64：链接到 /usr/lib，存放系统及软件需要的动态链接共享库。<br>• /mnt：这个目录让用户可以临时挂载其他的文件系统。<br>• /proc：虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。<br>• /root：系统管理员的主目录。<br>• /srv：存放一些服务启动之后需要提取的数据。<br>• /sys：该目录下安装了一个文件系统 sysfs。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建时，对应的文件和目录也在内核对象子系统中被创建。<br>• /tmp：公用的临时文件存放目录。<br>• /usr：应用程序和文件几乎都在这个目录下。<br>• /usr/src：内核源代码的存放目录。<br>• /var：存放了很多服务的日志信息</p><h2 id="UID-和-GID"><a href="#UID-和-GID" class="headerlink" title="UID 和 GID"></a>UID 和 GID</h2><p>Linux 是一个支持多用户的操作系统，每个用户都有 User ID(UID) 和 Group ID(GID)，UID 是对一个用户的单一身份标识，而 GID 则对应多个 UID。知道某个用户的 UID 和 GID 是非常有用的，一些程序可能就需要 UID/GID 来运行。可以使用 id 命令来查看：</p><pre><code>$ id rootuid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),19(log)$ id wzhrdxuid=1000(wzhrdx) gid=1000(wzhrdx) groups=1000(wzhrdx),3(sys),7(lp),10(wheel),90(network),91(video),93(optical),95(storage),96(scanner),98(power),56(bumblebee)</code></pre><p>UID 为 0 的 root 用户类似于系统管理员，它具有系统的完全访问权。我自己新建的用户 wzhrdx，其 UID 为 1000，是一个普通用户。GID 的关系存储在 /etc/group 文件中：</p><pre><code>$ cat /etc/grouproot:x:0:rootbin:x:1:root,bin,daemondaemon:x:2:root,bin,daemonsys:x:3:root,bin,firmy......</code></pre><p>所有用户的信息（除了密码）都保存在 /etc/passwd 文件中，而为了安全起见，加密过的用户密码保存在 /etc/shadow 文件中，此文件只有 root 权限可以访问。<br><code>$ sudo cat /etc/shadow</code><br>由于普通用户的权限比较低，这里使用 sudo 命令可以让普通用户以 root 用户的身份运行某一命令。使用 su 命令则可以切换到一个不同的用户：</p><pre><code>$ whoamiwzhrdx$ su root$ whoamiroot</code></pre><p>whoami 用于打印当前有效的用户名称，shell 中普通用户以 $ 开头，root 用户以 # 开头。在输入密码后，我们已经从 wzhrdx 用户转换到 root 用户了。</p><h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><p>在　Linux 中，文件或目录权限的控制分别以读取、写入、执行 3 种一般权限来区分，另有 3 种特殊权限可供运用。<br>使用 ls -l [file] 来查看某文件或目录的信息：<br>$ ls -l /<br>lrwxrwxrwx   1 root root     7 Jun 21 22:44 bin -&gt; usr/bin<br>drwxr-xr-x   4 root root  4096 Jul 28 08:48 boot<br>-rw-r–r–   1 root root 18561 Apr  2 22:48 desktopfs-pkgs.txt<br>第一栏从第二个字母开始就是权限字符串，权限表示三个为一组，依次是所有者权限、组权限、其他人权限。每组的顺序均为 rwx，如果有相应权限，则表示成相应字母，如果不具有相应权限，则用 - 表示。<br>• <code>r</code>：读取权限，数字代号为 “4”<br>• <code>w</code>：写入权限，数字代号为 “2”<br>• <code>x</code>：执行或切换权限，数字代号为 “1”<br>通过第一栏的第一个字母可知，第一行是一个链接文件 （l），第二行是个目录（d），第三行是个普通文件（-）。<br>用户可以使用 chmod 指令去变更文件与目录的权限。权限范围被指定为所有者（u）、所属组（g）、其他人（o）和所有人（a）。<br>• <code>-R</code>：递归处理，将指令目录下的所有文件及子目录一并处理；<br>• <code>&lt;权限范围&gt;+&lt;权限设置&gt;</code>：开启权限范围的文件或目录的该选项权限设置<br>• 如<code>$ chmod a+r [file]</code>：赋予所有用户读取权限<br>• <code>&lt;权限范围&gt;-&lt;权限设置&gt;</code>：关闭权限范围的文件或目录的该选项权限设置<br>• 如<code>$ chmod u-w [file]</code>：取消所有者写入权限<br>• <code>&lt;权限范围&gt;=&lt;权限设置&gt;</code>：指定权限范围的文件或目录的该选项权限设置；<br>• 如<code>$ chmod g=x [file]</code>：指定组权限为可执行<br>•   <code>$ chmod o=rwx [file]</code>：制定其他人权限为可读、可写和可执行<br><img src="https://s1.ax1x.com/2020/06/25/NBB9wn.png" alt="图片来自firmianay"><br>图片来自firmianay</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记(一)</title>
      <link href="posts/482898df.html"/>
      <url>posts/482898df.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><table><thead><tr><th align="left">command</th><th align="left"></th></tr></thead><tbody><tr><td align="left">ls</td><td align="left">用来显示目标列表</td></tr><tr><td align="left">cd [path]</td><td align="left">用来切换工作目录</td></tr><tr><td align="left">pwd</td><td align="left">以绝对路径的方式显示用户当前工作目录</td></tr><tr><td align="left">man [command]</td><td align="left">查看Linux中的指令帮助、配置文件帮助和编程帮助等信息</td></tr><tr><td align="left">apropos [whatever]</td><td align="left">在一些特定的包含系统命令的简短描述的数据库文件里查找关键字</td></tr><tr><td align="left">echo [string]</td><td align="left">打印一行文本，参数“-e”可激活转义字符</td></tr><tr><td align="left">cat [file]</td><td align="left">连接文件并打印到标准输出设备上</td></tr><tr><td align="left">less [file]</td><td align="left">允许用户向前或向后浏览文字档案的内容</td></tr><tr><td align="left">mv [file1] [file2]</td><td align="left">用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录</td></tr><tr><td align="left">cp [file1] [file2]</td><td align="left">用来将一个或多个源文件或者目录复制到指定的目的文件或目录</td></tr><tr><td align="left">rm [file]</td><td align="left">可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉</td></tr><tr><td align="left">ps</td><td align="left">用于报告当前系统的进程状态</td></tr><tr><td align="left">top</td><td align="left">实时查看系统的整体运行情况</td></tr><tr><td align="left">kill</td><td align="left">杀死一个进程</td></tr><tr><td align="left">ifconfig</td><td align="left">查看或设置网络设备</td></tr><tr><td align="left">ping</td><td align="left">查看网络上的主机是否工作</td></tr><tr><td align="left">netstat</td><td align="left">显示网络连接、路由表和网络接口信息</td></tr><tr><td align="left">nc(netcat)</td><td align="left">建立 TCP 和 UDP 连接并监听</td></tr><tr><td align="left">su</td><td align="left">切换当前用户身份到其他用户身份</td></tr><tr><td align="left">touch [file]</td><td align="left">创建新的空文件</td></tr><tr><td align="left">mkdir [dir]</td><td align="left">创建目录</td></tr><tr><td align="left">chmod</td><td align="left">变更文件或目录的权限</td></tr><tr><td align="left">chown</td><td align="left">变更某个文件或目录的所有者和所属组</td></tr><tr><td align="left">nano / vim / emacs</td><td align="left">字符终端的文本编辑器</td></tr><tr><td align="left">exit</td><td align="left">退出 shell</td></tr><tr><td align="left">管道命令符 &#124;</td><td align="left">将一个命令的标准输出作为另一个命令的标准输入</td></tr></tbody></table><h2 id="Bash-快捷键"><a href="#Bash-快捷键" class="headerlink" title="Bash 快捷键"></a>Bash 快捷键</h2><table><thead><tr><th align="left">command</th><th align="left"></th></tr></thead><tbody><tr><td align="left">Up(Down)</td><td align="left">上（下）一条指令</td></tr><tr><td align="left">Ctrl + c</td><td align="left">终止当前进程</td></tr><tr><td align="left">Ctrl + z</td><td align="left">挂起当前进程</td></tr><tr><td align="left">Ctrl + d</td><td align="left">删除光标处的字符</td></tr><tr><td align="left">Ctrl + l</td><td align="left">清屏</td></tr><tr><td align="left">Ctrl + a</td><td align="left">移动到命令行首</td></tr><tr><td align="left">Ctrl + e</td><td align="left">移动到命令行尾</td></tr><tr><td align="left">Ctrl + b</td><td align="left">按单词后移（向左）</td></tr><tr><td align="left">Ctrl + f</td><td align="left">按单词前移（向右）</td></tr><tr><td align="left">Ctrl + Shift + c</td><td align="left">复制</td></tr><tr><td align="left">Ctrl + Shift + v</td><td align="left">粘贴</td></tr></tbody></table><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>• top<br>可以实时动态地查看系统的整体运行情况。<br>• ps<br>用于报告当前系统的进程状态。可以搭配 kill 指令随时中断、删除不必要的程序。<br>查看某进程的状态：$ ps -aux | grep [file]，其中返回内容最左边的数字为进程号（PID）。<br>• kill<br>用来删除执行中的程序或工作。<br>删除进程某 PID 指定的进程：$ kill [PID]</p><h2 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h2><table><thead><tr><th align="left">command</th><th align="left"></th></tr></thead><tbody><tr><td align="left">var=value</td><td align="left">给变量var赋值value</td></tr><tr><td align="left">$var, ${var}</td><td align="left">取变量的值</td></tr><tr><td align="left">‘string’</td><td align="left">非替换字符串</td></tr><tr><td align="left">“string”</td><td align="left">可替换字符串</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用Qt创建一个IDE</title>
      <link href="posts/5e5eb9b1.html"/>
      <url>posts/5e5eb9b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="新建一个Qt项目"><a href="#新建一个Qt项目" class="headerlink" title="新建一个Qt项目"></a>新建一个Qt项目</h2><p>新建一个<code>Qt Widgets Applications</code>项目<br>在<code>Details</code>不勾选<code>Generate form</code><br><img src="https://s1.ax1x.com/2020/04/22/JtF61K.png" alt="图1"></p><p>一直点下一步<br>在<code>Kits</code>里勾选<code>MinGw 32-bit</code>和<code>MinGW 64-bit</code><br>在<code>mainwindows.h</code>里修改</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#ifndef</span> MAINWINDOW_H<span class="token id">#define</span> MAINWINDOW_H<span class="token id">#include</span> &lt;QMainWindow><span class="token id">#include</span> &lt;QTextEdit>    //文本QT_BEGIN_NAMESPACEclass QTextEdit;QT_END_NAMESPACEclass MainWindow : public QMainWindow</span><span class="token punctuation">{</span>    Q_OBJECT<span class="token property">public</span><span class="token punctuation">:</span>    <span class="token function">MainWindow</span><span class="token punctuation">(</span>QWidget *parent = <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">private</span><span class="token punctuation">:</span>    QTextEdit *editor<span class="token punctuation">;</span> //中央XextEdit控件private <span class="token property">slots</span><span class="token punctuation">:</span>    void <span class="token function">setupEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>#endif // MAINWINDOW_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>mainwindows.cpp</code>里修改</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#include</span> &lt;QtWidgets><span class="token id">#include</span> "mainwindow<span class="token class">.h</span>"MainWindow<span class="token pseudo-element">::MainWindow</span>(QWidget *parent)    : QMainWindow(parent)</span><span class="token punctuation">{</span>    <span class="token function">setupEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"IDE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::setupEditor</span>()</span><span class="token punctuation">{</span>    QFont font<span class="token punctuation">;</span>    font<span class="token number">.</span><span class="token function">setFamily</span><span class="token punctuation">(</span><span class="token string">"Courier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    font<span class="token number">.</span><span class="token function">setFixedPitch</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>    font<span class="token number">.</span><span class="token function">setPointSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor = new QTextEdit<span class="token punctuation">;</span>    editor-><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>main.cpp</code>里修改</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#include</span> "mainwindow<span class="token class">.h</span>"<span class="token id">#include</span> &lt;QApplication>int main(int argc, char *argv[])</span><span class="token punctuation">{</span>    QApplication <span class="token function">app</span><span class="token punctuation">(</span>argc, argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    MainWindow window<span class="token punctuation">;</span>    window<span class="token number">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">640</span>, <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token number">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    return app<span class="token number">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加状态栏"><a href="#添加状态栏" class="headerlink" title="添加状态栏"></a>添加状态栏</h2><p>在<code>mainwindows.h</code>里修改</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#ifndef</span> MAINWINDOW_H<span class="token id">#define</span> MAINWINDOW_H<span class="token id">#include</span> &lt;QMainWindow><span class="token id">#include</span> &lt;QTextEdit>    //文本<span class="token id">#include</span> &lt;QMenu>        //加入菜单<span class="token id">#include</span> &lt;QMenuBar>     //加入菜单栏<span class="token id">#include</span> &lt;QAction>      //加入菜单栏<span class="token id">#include</span> &lt;QFileDialog>QT_BEGIN_NAMESPACEclass QTextEdit;QT_END_NAMESPACEclass MainWindow : public QMainWindow</span><span class="token punctuation">{</span>    Q_OBJECT<span class="token property">public</span><span class="token punctuation">:</span>    <span class="token function">MainWindow</span><span class="token punctuation">(</span>QWidget *parent = <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">private</span><span class="token punctuation">:</span>    bool is_changed<span class="token punctuation">;</span>    QTextEdit *editor<span class="token punctuation">;</span> //中央XextEdit控件    QString fileName<span class="token punctuation">;</span>  //当前文件的名字    //文件菜单    QMenu *file_menu<span class="token punctuation">;</span>   //文件菜单    QAction *new_file<span class="token punctuation">;</span>   //新建文件菜单项    QAction *open_file<span class="token punctuation">;</span>   //打开文件菜单项    QAction *save_file<span class="token punctuation">;</span>   //保存文件菜单项    QAction *exit_file<span class="token punctuation">;</span>   //退出文件菜单项    //编辑菜单    QMenu *edit_menu<span class="token punctuation">;</span>   //编辑菜单    QAction *copy_edit<span class="token punctuation">;</span>   //编辑菜单的复制按钮    QAction *paste_edit<span class="token punctuation">;</span>    QAction *cut_edit<span class="token punctuation">;</span>    QAction *allselect_edit<span class="token punctuation">;</span>    QMenu *help_menu<span class="token punctuation">;</span>   //帮助菜单    //编译菜单    QMenu *comp_menu<span class="token punctuation">;</span>   //编译菜单    QAction *comp_comp<span class="token punctuation">;</span>   //编译按钮    QAction *run_comp<span class="token punctuation">;</span>   //运行按钮    void <span class="token function">precomp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>private <span class="token property">slots</span><span class="token punctuation">:</span>    void on_<span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//在QT编辑环境，安装ALT+ENTER，出现提示再按一次回车    void on_<span class="token function">open</span><span class="token punctuation">(</span>const QString &amp;path = <span class="token function">QString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">paste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">allselect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">changed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void on_<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void <span class="token function">setupEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void <span class="token function">setupFileMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void <span class="token function">setupHelpMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    void <span class="token function">about</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>#endif // MAINWINDOW_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>mainwindows.cpp</code>里修改</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#include</span> &lt;QtWidgets><span class="token id">#include</span> "mainwindow<span class="token class">.h</span>"MainWindow<span class="token pseudo-element">::MainWindow</span>(QWidget *parent)    : QMainWindow(parent)</span><span class="token punctuation">{</span>    <span class="token function">setupFileMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setupHelpMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setupEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"IDE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //文本内容在保存前是否发生变动    is_changed = false<span class="token punctuation">;</span>    //添加菜单项，并为其设定快捷键    //【文件菜单栏】    file_menu = this-><span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>-><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    new_file = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"新建文件"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>  //第一个参数是菜单项的文字，第二个参数是指向主体的指针    new_file -><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"ctrl+n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //设定快捷键    file_menu -><span class="token function">addAction</span><span class="token punctuation">(</span>new_file<span class="token punctuation">)</span><span class="token punctuation">;</span>        //关联 菜单栏 与 菜单项    file_menu -><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             //在文件下拉菜单上面显示一个分隔符    open_file = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"打开文件"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>    file_menu -><span class="token function">addAction</span><span class="token punctuation">(</span>open_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    open_file -><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"ctrl+o"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    save_file = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"保存文件"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>    file_menu -><span class="token function">addAction</span><span class="token punctuation">(</span>save_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    save_file -><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"ctrl+s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exit_file = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"退出"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>    file_menu -><span class="token function">addAction</span><span class="token punctuation">(</span>exit_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    //【编译菜单栏】    comp_menu = this-><span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>-><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"编译"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    comp_comp = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"编译"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span> comp_menu-><span class="token function">addAction</span><span class="token punctuation">(</span>comp_comp<span class="token punctuation">)</span><span class="token punctuation">;</span>    run_comp = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"运行"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>  comp_menu-><span class="token function">addAction</span><span class="token punctuation">(</span>run_comp<span class="token punctuation">)</span><span class="token punctuation">;</span>    //【帮助菜单栏】    help_menu = this-><span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>-><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"帮助"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //【鼠标事件与函数关联】当鼠标点击exit_file 菜单的时候，执行on_<span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数    <span class="token function">connect</span><span class="token punctuation">(</span>exit_file,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>open_file,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>save_file,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>new_file,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>copy_edit,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>paste_edit,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">paste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>cut_edit,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>allselect_edit,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">allselect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>editor,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">textChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">changed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//当文本内容发生变化时，触发on_changed函数    <span class="token function">connect</span><span class="token punctuation">(</span>comp_comp,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//当文本内容发生变化时，触发on_changed函数    <span class="token function">connect</span><span class="token punctuation">(</span>run_comp,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//当文本内容发生变化时，触发on_changed函数<span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::on_open</span>(const QString &amp;path)</span><span class="token punctuation">{</span>    <span class="token selector">QString fileName = path;    if (fileName<span class="token class">.isNull</span>())        fileName = QFileDialog<span class="token pseudo-element">::getOpenFileName</span>(this, tr("Open File"), "", "C++ Files (*<span class="token class">.cpp</span> *<span class="token class">.h</span>)");    if (!fileName<span class="token class">.isEmpty</span>()) </span><span class="token punctuation">{</span>        QFile <span class="token function">file</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        if <span class="token punctuation">(</span>file<span class="token number">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token property">QFile</span><span class="token punctuation">:</span><span class="token punctuation">:</span>ReadOnly | <span class="token property">QFile</span><span class="token punctuation">:</span><span class="token punctuation">:</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span>            editor-><span class="token function">setPlainText</span><span class="token punctuation">(</span>file<span class="token number">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::setupFileMenu</span>()</span><span class="token punctuation">{</span>    QMenu *fileMenu = new <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"&amp;File"</span><span class="token punctuation">)</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>-><span class="token function">addMenu</span><span class="token punctuation">(</span>fileMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>    //【编辑菜单栏】    edit_menu = this-><span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>-><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"编辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    copy_edit = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"复制"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>    copy_edit -><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"ctrl+c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    edit_menu -><span class="token function">addAction</span><span class="token punctuation">(</span>copy_edit<span class="token punctuation">)</span><span class="token punctuation">;</span>    paste_edit = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"粘贴"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>    paste_edit -><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"ctrl+v"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     edit_menu -><span class="token function">addAction</span><span class="token punctuation">(</span>paste_edit<span class="token punctuation">)</span><span class="token punctuation">;</span>    cut_edit = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"剪切"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>    cut_edit -><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"ctrl+x"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    edit_menu -><span class="token function">addAction</span><span class="token punctuation">(</span>cut_edit<span class="token punctuation">)</span><span class="token punctuation">;</span>    allselect_edit = new <span class="token function">QAction</span><span class="token punctuation">(</span><span class="token string">"全选"</span>,this<span class="token punctuation">)</span><span class="token punctuation">;</span>    allselect_edit -><span class="token function">setShortcut</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"ctrl+a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    edit_menu -><span class="token function">addAction</span><span class="token punctuation">(</span>allselect_edit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::setupEditor</span>()</span><span class="token punctuation">{</span>    QFont font<span class="token punctuation">;</span>    font<span class="token number">.</span><span class="token function">setFamily</span><span class="token punctuation">(</span><span class="token string">"Courier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    font<span class="token number">.</span><span class="token function">setFixedPitch</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>    font<span class="token number">.</span><span class="token function">setPointSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor = new QTextEdit<span class="token punctuation">;</span>    editor-><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"mainwindow.h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    if <span class="token punctuation">(</span>file<span class="token number">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token property">QFile</span><span class="token punctuation">:</span><span class="token punctuation">:</span>ReadOnly | <span class="token property">QFile</span><span class="token punctuation">:</span><span class="token punctuation">:</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span>        editor-><span class="token function">setPlainText</span><span class="token punctuation">(</span>file<span class="token number">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::about</span>()</span><span class="token punctuation">{</span>    <span class="token property">QMessageBox</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">about</span><span class="token punctuation">(</span>this, <span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"About IDE"</span><span class="token punctuation">)</span>,                <span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"version0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::setupHelpMenu</span>()</span><span class="token punctuation">{</span>    QMenu *helpMenu = new <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"&amp;Help"</span><span class="token punctuation">)</span>, this<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">menuBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>-><span class="token function">addMenu</span><span class="token punctuation">(</span>helpMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>    helpMenu-><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"&amp;About"</span><span class="token punctuation">)</span>, this, <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::precomp</span>()//预编译</span><span class="token punctuation">{</span>    <span class="token selector">FILE *p = fopen(fileName<span class="token class">.toStdString</span>()<span class="token class">.data</span>(),"r");    if(p == NULL) return ;    QString cmd = fileName +"<span class="token class">.c</span>";    FILE *p1 = fopen(cmd<span class="token class">.toStdString</span>()<span class="token class">.data</span>(),"w");    if(p1 == NULL) return ;    QString str;    while(!feof(p))    </span><span class="token punctuation">{</span>        <span class="token selector">char buf<span class="token attribute">[1024]</span> = </span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">fgets</span><span class="token punctuation">(</span>buf,<span class="token function">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>,p<span class="token punctuation">)</span><span class="token punctuation">;</span>        str += buf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">str<span class="token class">.replace</span>("包含","<span class="token id">#include</span>");    str<span class="token class">.replace</span>("主函数","main");    str<span class="token class">.replace</span>("整数","int");    str<span class="token class">.replace</span>("开始","</span><span class="token punctuation">{</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token number">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"收工"</span>,<span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token number">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"。"</span>,<span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token number">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"返回"</span>,<span class="token string">"return"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token number">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"打印"</span>,<span class="token string">"printf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token number">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"输入输出"</span>,<span class="token string">"&lt;stdio.h>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token number">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"无声的等待..."</span>,<span class="token string">"getchar()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token number">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>,p<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>p<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//程序退出void MainWindow<span class="token pseudo-element">::on_exit</span>()</span><span class="token punctuation">{</span>    this -><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//保存文件void MainWindow<span class="token pseudo-element">::on_save</span>()</span><span class="token punctuation">{</span>    <span class="token selector">if(fileName<span class="token class">.isEmpty</span>())    </span><span class="token punctuation">{</span>        fileName = <span class="token property">QFileDialog</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span>this,<span class="token string">"保存文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">if(!fileName<span class="token class">.isEmpty</span>())    </span><span class="token punctuation">{</span>        FILE *p = <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token number">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>,<span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>p == NULL<span class="token punctuation">)</span> return <span class="token punctuation">;</span>        QString str = editor-><span class="token function">toPlainText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token number">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>,p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">//新建文件void MainWindow<span class="token pseudo-element">::on_new</span>()</span><span class="token punctuation">{</span>    <span class="token selector">if(is_changed == true)    </span><span class="token punctuation">{</span>        on_<span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is_changed = false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fileName = <span class="token string">""</span><span class="token punctuation">;</span>    editor-><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//IDE的复制功能void MainWindow<span class="token pseudo-element">::on_copy</span>()</span><span class="token punctuation">{</span>    editor-><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::on_paste</span>()</span><span class="token punctuation">{</span>    editor-><span class="token function">paste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::on_cut</span>()</span><span class="token punctuation">{</span>    editor-><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::on_allselect</span>()</span><span class="token punctuation">{</span>    editor-><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::on_changed</span>()</span><span class="token punctuation">{</span>    is_changed = true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//编译并运行按钮void MainWindow<span class="token pseudo-element">::on_comp</span>()</span><span class="token punctuation">{</span>    <span class="token selector">if (is_changed == true)//在点击编译按钮，如果文本内容发生变化，就自动保存    </span><span class="token punctuation">{</span>        on_<span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">precomp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//自动以预编译    QString cmd<span class="token punctuation">;</span>    const char *s = fileName<span class="token number">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cmd<span class="token number">.</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"gcc -o %s.exe %s.c"</span>,s,s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token number">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//先编译    //如何删除那个临时文件呢    cmd = fileName<span class="token number">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span>,<span class="token string">"\\"</span><span class="token punctuation">)</span> + <span class="token string">".c"</span><span class="token punctuation">;</span>    <span class="token function">remove</span><span class="token punctuation">(</span>cmd<span class="token number">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cmd = fileName + <span class="token string">".exe"</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token number">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//再运行<span class="token punctuation">}</span><span class="token selector">void MainWindow<span class="token pseudo-element">::on_run</span>()</span><span class="token punctuation">{</span>    QString cmd<span class="token punctuation">;</span>    cmd = fileName + <span class="token string">".exe"</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token number">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加浮动窗口"><a href="#添加浮动窗口" class="headerlink" title="添加浮动窗口"></a>添加浮动窗口</h3><p>在<code>mainwindows.cpp</code>里修改</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">MainWindow<span class="token pseudo-element">::MainWindow</span>(QWidget *parent)    : QMainWindow(parent)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里面添加浮动窗口</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">MainWindow<span class="token pseudo-element">::MainWindow</span>(QWidget *parent)    : QMainWindow(parent)</span><span class="token punctuation">{</span>    <span class="token number">....</span>#省略前面的代码    <span class="token function">connect</span><span class="token punctuation">(</span>run_comp,<span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>,this,<span class="token function">SLOT</span><span class="token punctuation">(</span>on_<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//当文本内容发生变化时，触发on_changed函数#在上一行代码后添加如下内容        //浮动窗口---------------------------------------------------------------------    QDockWidget *dock = new <span class="token function">QDockWidget</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addDockWidget</span><span class="token punctuation">(</span><span class="token property">Qt</span><span class="token punctuation">:</span><span class="token punctuation">:</span>RightDockWidgetArea, dock<span class="token punctuation">)</span><span class="token punctuation">;</span>    //给浮动窗口添加控件      QTreeView *treeView = new <span class="token function">QTreeView</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>      dock-><span class="token function">setWidget</span><span class="token punctuation">(</span>treeView<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="给代码添加高亮"><a href="#给代码添加高亮" class="headerlink" title="给代码添加高亮"></a>给代码添加高亮</h3><p>在文件上右键选择<code>add new...</code><br><img src="https://s1.ax1x.com/2020/04/22/JtQkkT.png" alt="图2"></p><p><img src="https://s1.ax1x.com/2020/04/22/Jtl0M9.png" alt="图3"></p><p>将<code>class name</code>命名为<code>highlighter</code><br>将<code>.pro</code>文件修改</p><pre class="line-numbers language-css"><code class="language-css">QT += widgets<span class="token function">requires</span><span class="token punctuation">(</span><span class="token function">qtConfig</span><span class="token punctuation">(</span>filedialog<span class="token punctuation">)</span><span class="token punctuation">)</span>HEADERS         = highlighter<span class="token number">.</span>h \                  mainwindow<span class="token number">.</span>hSOURCES         = highlighter<span class="token number">.</span>cpp \                  mainwindow<span class="token number">.</span>cpp \                  main<span class="token number">.</span>cpp# installtarget<span class="token number">.</span>path = $$[QT_INSTALL_EXAMPLES]/widgets/richtext/syntaxhighlighterINSTALLS += target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>highlighter.h</code>的代码修改为</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#ifndef</span> HIGHLIGHTER_H<span class="token id">#define</span> HIGHLIGHTER_H<span class="token id">#include</span> &lt;QSyntaxHighlighter><span class="token id">#include</span> &lt;QTextCharFormat><span class="token id">#include</span> &lt;QRegularExpression>QT_BEGIN_NAMESPACEclass QTextDocument;QT_END_NAMESPACEclass Highlighter : public QSyntaxHighlighter</span><span class="token punctuation">{</span>    <span class="token selector">Q_OBJECTpublic:    Highlighter(QTextDocument *parent = 0);protected:    void highlightBlock(const QString &amp;text) override;private:    struct HighlightingRule    </span><span class="token punctuation">{</span>        QRegularExpression pattern<span class="token punctuation">;</span>        QTextCharFormat format<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    QVector&lt;HighlightingRule> highlightingRules<span class="token punctuation">;</span>    QRegularExpression commentStartExpression<span class="token punctuation">;</span>    QRegularExpression commentEndExpression<span class="token punctuation">;</span>    QTextCharFormat keywordFormat<span class="token punctuation">;</span>    QTextCharFormat classFormat<span class="token punctuation">;</span>    QTextCharFormat singleLineCommentFormat<span class="token punctuation">;</span>    QTextCharFormat multiLineCommentFormat<span class="token punctuation">;</span>    QTextCharFormat quotationFormat<span class="token punctuation">;</span>    QTextCharFormat functionFormat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>#endif // HIGHLIGHTER_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>highlighter.cpp</code>里的代码修改为</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#include</span> "highlighter<span class="token class">.h</span>"Highlighter<span class="token pseudo-element">::Highlighter</span>(QTextDocument *parent)    : QSyntaxHighlighter(parent)</span><span class="token punctuation">{</span>    <span class="token selector">HighlightingRule rule;    keywordFormat<span class="token class">.setForeground</span>(Qt<span class="token pseudo-element">::darkBlue</span>);    keywordFormat<span class="token class">.setFontWeight</span>(QFont<span class="token pseudo-element">::Bold</span>);    QStringList keywordPatterns;    keywordPatterns &lt;&lt; "\\bchar\\b" &lt;&lt; "\\bclass\\b" &lt;&lt; "\\bconst\\b"                    &lt;&lt; "\\bdouble\\b" &lt;&lt; "\\benum\\b" &lt;&lt; "\\bexplicit\\b"                    &lt;&lt; "\\bfriend\\b" &lt;&lt; "\\binline\\b" &lt;&lt; "\\bint\\b"                    &lt;&lt; "\\blong\\b" &lt;&lt; "\\bnamespace\\b" &lt;&lt; "\\boperator\\b"                    &lt;&lt; "\\bprivate\\b" &lt;&lt; "\\bprotected\\b" &lt;&lt; "\\bpublic\\b"                    &lt;&lt; "\\bshort\\b" &lt;&lt; "\\bsignals\\b" &lt;&lt; "\\bsigned\\b"                    &lt;&lt; "\\bslots\\b" &lt;&lt; "\\bstatic\\b" &lt;&lt; "\\bstruct\\b"                    &lt;&lt; "\\btemplate\\b" &lt;&lt; "\\btypedef\\b" &lt;&lt; "\\btypename\\b"                    &lt;&lt; "\\bunion\\b" &lt;&lt; "\\bunsigned\\b" &lt;&lt; "\\bvirtual\\b"                    &lt;&lt; "\\bvoid\\b" &lt;&lt; "\\bvolatile\\b" &lt;&lt; "\\bbool\\b";    foreach (const QString &amp;pattern, keywordPatterns) </span><span class="token punctuation">{</span>        rule<span class="token number">.</span>pattern = <span class="token function">QRegularExpression</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        rule<span class="token number">.</span>format = keywordFormat<span class="token punctuation">;</span>        highlightingRules<span class="token number">.</span><span class="token function">append</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    classFormat<span class="token number">.</span><span class="token function">setFontWeight</span><span class="token punctuation">(</span><span class="token property">QFont</span><span class="token punctuation">:</span><span class="token punctuation">:</span>Bold<span class="token punctuation">)</span><span class="token punctuation">;</span>    classFormat<span class="token number">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token property">Qt</span><span class="token punctuation">:</span><span class="token punctuation">:</span>darkMagenta<span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token number">.</span>pattern = <span class="token function">QRegularExpression</span><span class="token punctuation">(</span><span class="token string">"\\bQ[A-Za-z]+\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token number">.</span>format = classFormat<span class="token punctuation">;</span>    highlightingRules<span class="token number">.</span><span class="token function">append</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLineCommentFormat<span class="token number">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token property">Qt</span><span class="token punctuation">:</span><span class="token punctuation">:</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token number">.</span>pattern = <span class="token function">QRegularExpression</span><span class="token punctuation">(</span><span class="token string">"//[^\n]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token number">.</span>format = singleLineCommentFormat<span class="token punctuation">;</span>    highlightingRules<span class="token number">.</span><span class="token function">append</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    multiLineCommentFormat<span class="token number">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token property">Qt</span><span class="token punctuation">:</span><span class="token punctuation">:</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>    quotationFormat<span class="token number">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token property">Qt</span><span class="token punctuation">:</span><span class="token punctuation">:</span>darkGreen<span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token number">.</span>pattern = <span class="token function">QRegularExpression</span><span class="token punctuation">(</span><span class="token string">"\".*\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token number">.</span>format = quotationFormat<span class="token punctuation">;</span>    highlightingRules<span class="token number">.</span><span class="token function">append</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    functionFormat<span class="token number">.</span><span class="token function">setFontItalic</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>    functionFormat<span class="token number">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token property">Qt</span><span class="token punctuation">:</span><span class="token punctuation">:</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token number">.</span>pattern = <span class="token function">QRegularExpression</span><span class="token punctuation">(</span><span class="token string">"\\b[A-Za-z0-9_]+(?=\\()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rule<span class="token number">.</span>format = functionFormat<span class="token punctuation">;</span>    highlightingRules<span class="token number">.</span><span class="token function">append</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>    commentStartExpression = <span class="token function">QRegularExpression</span><span class="token punctuation">(</span><span class="token string">"/\\*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commentEndExpression = <span class="token function">QRegularExpression</span><span class="token punctuation">(</span><span class="token string">"\\*/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">void Highlighter<span class="token pseudo-element">::highlightBlock</span>(const QString &amp;text)</span><span class="token punctuation">{</span>    <span class="token selector">foreach (const HighlightingRule &amp;rule, highlightingRules) </span><span class="token punctuation">{</span>        <span class="token selector">QRegularExpressionMatchIterator matchIterator = rule<span class="token class">.pattern.globalMatch</span>(text);        while (matchIterator<span class="token class">.hasNext</span>()) </span><span class="token punctuation">{</span>            QRegularExpressionMatch match = matchIterator<span class="token number">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setFormat</span><span class="token punctuation">(</span>match<span class="token number">.</span><span class="token function">capturedStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, match<span class="token number">.</span><span class="token function">capturedLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>, rule<span class="token number">.</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector">setCurrentBlockState(0);    int startIndex = 0;    if (previousBlockState() != 1)        startIndex = text<span class="token class">.indexOf</span>(commentStartExpression);    while (startIndex >= 0) </span><span class="token punctuation">{</span>        <span class="token selector">QRegularExpressionMatch match = commentEndExpression<span class="token class">.match</span>(text, startIndex);        int endIndex = match<span class="token class">.capturedStart</span>();        int commentLength = 0;        if (endIndex == -1) </span><span class="token punctuation">{</span>            <span class="token function">setCurrentBlockState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            commentLength = text<span class="token number">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> - startIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token selector">else </span><span class="token punctuation">{</span>            commentLength = endIndex - startIndex                            + match<span class="token number">.</span><span class="token function">capturedLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setFormat</span><span class="token punctuation">(</span>startIndex, commentLength, multiLineCommentFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        startIndex = text<span class="token number">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>commentStartExpression, startIndex + commentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>mainwindow.h</code>里添加</p><pre class="line-numbers language-css"><code class="language-css">//添加include文件#ifndef MAINWINDOW_H<span class="token hexcode">#def</span>ine MAINWINDOW_H#include <span class="token string">"highlighter.h"</span>#include &lt;QMainWindow>#include &lt;QTextEdit>    //文本#include &lt;QMenu>        //加入菜单#include &lt;QMenuBar>     //加入菜单栏#include &lt;QAction>      //加入菜单栏#include &lt;QFileDialog><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到<code>private:</code>添加</p><pre class="line-numbers language-css"><code class="language-css">    Highlighter *highlighter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如图<br><img src="https://s1.ax1x.com/2020/04/22/Jt3mcQ.png" alt="图4"></p><p>修改<code>mainwindow.cpp</code></p><pre class="line-numbers language-css"><code class="language-css"> highlighter = new <span class="token function">Highlighter</span><span class="token punctuation">(</span>editor-><span class="token function">document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>位置如图<br><img src="https://s1.ax1x.com/2020/04/22/Jt8vsH.png" alt="图5"></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
